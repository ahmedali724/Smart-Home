
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00002d88  00002dfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003c54  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001515  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000080fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000829d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  0000848f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000a89a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000cdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000d2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000dc1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 42 12 	call	0x2484	; 0x2484 <main>
      7a:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ed       	ldi	r26, 0xDB	; 219
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ed       	ldi	r24, 0xDB	; 219
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b ed       	ldi	r22, 0xDB	; 219
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ed 51       	subi	r30, 0x1D	; 29
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <TIMER0_Init>:
#include "../../STD_TYPES.h"
#include "../../Comman_Macros.h"
#include "TIMER0_Config.h"
#include "TIMER0_Private.h"

void TIMER0_Init(uint8 timer0Mode, uint8 time0Prescaler) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <TIMER0_Init+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <TIMER0_Init+0x8>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	6a 83       	std	Y+2, r22	; 0x02
	/* choose the timer modes */
	switch (timer0Mode) {
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3c 83       	std	Y+4, r19	; 0x04
     e36:	2b 83       	std	Y+3, r18	; 0x03
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	99 f1       	breq	.+102    	; 0xea8 <TIMER0_Init+0x8a>
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	2c f4       	brge	.+10     	; 0xe56 <TIMER0_Init+0x38>
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	61 f0       	breq	.+24     	; 0xe6c <TIMER0_Init+0x4e>
     e54:	46 c0       	rjmp	.+140    	; 0xee2 <TIMER0_Init+0xc4>
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	3c 81       	ldd	r19, Y+4	; 0x04
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	a9 f0       	breq	.+42     	; 0xe8a <TIMER0_Init+0x6c>
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	91 05       	cpc	r25, r1
     e68:	71 f1       	breq	.+92     	; 0xec6 <TIMER0_Init+0xa8>
     e6a:	3b c0       	rjmp	.+118    	; 0xee2 <TIMER0_Init+0xc4>
	case TIMER0_NORMAL_MODE:
		/* normal mode => (WGM00 = 0 and WGM01 = 0) */
		CLEAR_BIT(TCCR0, TCCR0_WGM00);
     e6c:	a3 e5       	ldi	r26, 0x53	; 83
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e3 e5       	ldi	r30, 0x53	; 83
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 7b       	andi	r24, 0xBF	; 191
     e78:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_WGM01);
     e7a:	a3 e5       	ldi	r26, 0x53	; 83
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e5       	ldi	r30, 0x53	; 83
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	8c 93       	st	X, r24
     e88:	2c c0       	rjmp	.+88     	; 0xee2 <TIMER0_Init+0xc4>
		break;
	case TIMER0_CTC_MODE:
		/* CTC mode => (WGM00 = 0 and WGM01 = 1) */
		CLEAR_BIT(TCCR0, TCCR0_WGM00);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7b       	andi	r24, 0xBF	; 191
     e96:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	8c 93       	st	X, r24
     ea6:	1d c0       	rjmp	.+58     	; 0xee2 <TIMER0_Init+0xc4>
		break;
	case TIMER0_PHASE_CORRECT_MODE:
		/* phase correct mode => (WGM00 = 1 and WGM01 = 0) */
		SET_BIT(TCCR0, TCCR0_WGM00);
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_WGM01);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	8c 93       	st	X, r24
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <TIMER0_Init+0xc4>
		break;
	case TIMER0_FAST_PWM_MODE:
		/* fast PWM mode => (WGM00 = 1 and WGM01 = 1) */
		SET_BIT(TCCR0, TCCR0_WGM00);
     ec6:	a3 e5       	ldi	r26, 0x53	; 83
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e5       	ldi	r30, 0x53	; 83
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 64       	ori	r24, 0x40	; 64
     ed2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_WGM01);
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 60       	ori	r24, 0x08	; 8
     ee0:	8c 93       	st	X, r24
		break;
	}
	/* to make sure that the pres-caler bits is zero */
	TCCR0 &= 0xF8;
     ee2:	a3 e5       	ldi	r26, 0x53	; 83
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e3 e5       	ldi	r30, 0x53	; 83
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 7f       	andi	r24, 0xF8	; 248
     eee:	8c 93       	st	X, r24
	/* put pre-scaler value in its bits */
	TCCR0 |= time0Prescaler;
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	90 81       	ld	r25, Z
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	89 2b       	or	r24, r25
     efe:	8c 93       	st	X, r24
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <TIMER0_InterruptEnable>:

void TIMER0_InterruptEnable(void) {
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	/* enable timer interrupt => (TOIE0 = 1) */
	SET_BIT(TIMSK, TIMSK_TOIE0);
     f16:	a9 e5       	ldi	r26, 0x59	; 89
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e9 e5       	ldi	r30, 0x59	; 89
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	81 60       	ori	r24, 0x01	; 1
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <TIMER0_InterruptDisable>:
void TIMER0_InterruptDisable(void) {
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	/* disable timer interrupt => (TOIE0 = 0) */
	CLEAR_BIT(TIMSK, TIMSK_TOIE0);
     f32:	a9 e5       	ldi	r26, 0x59	; 89
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e9 e5       	ldi	r30, 0x59	; 89
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8e 7f       	andi	r24, 0xFE	; 254
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <TIMER0_SetCompMatchValue>:

void TIMER0_SetCompMatchValue(uint8 value) {
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	/* store the value in OCR0 register */
	OCR0 = value;
     f52:	ec e5       	ldi	r30, 0x5C	; 92
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	80 83       	st	Z, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <TIMER0_SetFastPwdMode>:

void TIMER0_SetFastPwdMode(uint8 timer0PwmMode) {
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TIMER0_SetFastPwdMode+0x6>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	89 83       	std	Y+1, r24	; 0x01
	/* choose the fast PWM modes */
	switch (timer0PwmMode) {
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3b 83       	std	Y+3, r19	; 0x03
     f78:	2a 83       	std	Y+2, r18	; 0x02
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	9b 81       	ldd	r25, Y+3	; 0x03
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	31 f0       	breq	.+12     	; 0xf8e <TIMER0_SetFastPwdMode+0x2c>
     f82:	2a 81       	ldd	r18, Y+2	; 0x02
     f84:	3b 81       	ldd	r19, Y+3	; 0x03
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	31 05       	cpc	r19, r1
     f8a:	81 f0       	breq	.+32     	; 0xfac <TIMER0_SetFastPwdMode+0x4a>
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <TIMER0_SetFastPwdMode+0x66>
	case TIMER0PWM_INVERTED:
		/* set on top, clear on compare match */
		SET_BIT(TCCR0, TCCR0_COM00);
     f8e:	a3 e5       	ldi	r26, 0x53	; 83
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e3 e5       	ldi	r30, 0x53	; 83
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 61       	ori	r24, 0x10	; 16
     f9a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_COM01);
     f9c:	a3 e5       	ldi	r26, 0x53	; 83
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e3 e5       	ldi	r30, 0x53	; 83
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	8c 93       	st	X, r24
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <TIMER0_SetFastPwdMode+0x66>
		break;
	case TIMER0PWM_NON_INVERTED:
		/* set on compare match, clear on top */
		CLEAR_BIT(TCCR0, TCCR0_COM00);
     fac:	a3 e5       	ldi	r26, 0x53	; 83
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e3 e5       	ldi	r30, 0x53	; 83
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8f 7e       	andi	r24, 0xEF	; 239
     fb8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_COM01);
     fba:	a3 e5       	ldi	r26, 0x53	; 83
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e3 e5       	ldi	r30, 0x53	; 83
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 62       	ori	r24, 0x20	; 32
     fc6:	8c 93       	st	X, r24
		break;
	}
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <GIE_Enable>:
#include "../../STD_TYPES.h"
#include "../../Comman_Macros.h"
#include "GIE_Config.h"
#include "GIE_Private.h"

void GIE_Enable() {
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	/* set I bit in status register I = 1 (the global interrupt is enabled) */
	SET_BIT(SREG, SREG_I);
     fdc:	af e5       	ldi	r26, 0x5F	; 95
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ef e5       	ldi	r30, 0x5F	; 95
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <GIE_Disable>:

void GIE_Disable() {
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	/* reset I bit in status register I = 0 (the global interrupt is disabled) */
	CLEAR_BIT(SREG, SREG_I);
     ff8:	af e5       	ldi	r26, 0x5F	; 95
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ef e5       	ldi	r30, 0x5F	; 95
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8f 77       	andi	r24, 0x7F	; 127
    1004:	8c 93       	st	X, r24
}
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <GPIO_SetPinDirection>:
#include "GPIO_Private.h"
#include "GPIO_Config.h"

/* setting pin direction */
void GPIO_SetPinDirection(uint8 uint8_port, uint8 uint8_pin,
		uint8 uint8_direction) {
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	27 97       	sbiw	r28, 0x07	; 7
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
    1024:	4b 83       	std	Y+3, r20	; 0x03
	if (uint8_direction == INPUT) {
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	88 23       	and	r24, r24
    102a:	09 f0       	breq	.+2      	; 0x102e <GPIO_SetPinDirection+0x22>
    102c:	74 c0       	rjmp	.+232    	; 0x1116 <GPIO_SetPinDirection+0x10a>
		switch (uint8_port) {
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3f 83       	std	Y+7, r19	; 0x07
    1036:	2e 83       	std	Y+6, r18	; 0x06
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	9f 81       	ldd	r25, Y+7	; 0x07
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	59 f1       	breq	.+86     	; 0x1098 <GPIO_SetPinDirection+0x8c>
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	3f 81       	ldd	r19, Y+7	; 0x07
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <GPIO_SetPinDirection+0x4a>
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f0       	breq	.+26     	; 0x106e <GPIO_SetPinDirection+0x62>
    1054:	d2 c0       	rjmp	.+420    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
    1056:	2e 81       	ldd	r18, Y+6	; 0x06
    1058:	3f 81       	ldd	r19, Y+7	; 0x07
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	89 f1       	breq	.+98     	; 0x10c2 <GPIO_SetPinDirection+0xb6>
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
    1062:	9f 81       	ldd	r25, Y+7	; 0x07
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <GPIO_SetPinDirection+0x60>
    106a:	40 c0       	rjmp	.+128    	; 0x10ec <GPIO_SetPinDirection+0xe0>
    106c:	c6 c0       	rjmp	.+396    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
		case PORT_A:
			CLEAR_BIT(DDRA, uint8_pin);
    106e:	aa e3       	ldi	r26, 0x3A	; 58
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_SetPinDirection+0x80>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_SetPinDirection+0x7c>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	b1 c0       	rjmp	.+354    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB, uint8_pin);
    1098:	a7 e3       	ldi	r26, 0x37	; 55
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e7 e3       	ldi	r30, 0x37	; 55
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_SetPinDirection+0xaa>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_SetPinDirection+0xa6>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	9c c0       	rjmp	.+312    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC, uint8_pin);
    10c2:	a4 e3       	ldi	r26, 0x34	; 52
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e4 e3       	ldi	r30, 0x34	; 52
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <GPIO_SetPinDirection+0xd4>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <GPIO_SetPinDirection+0xd0>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	87 c0       	rjmp	.+270    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD, uint8_pin);
    10ec:	a1 e3       	ldi	r26, 0x31	; 49
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e1 e3       	ldi	r30, 0x31	; 49
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_SetPinDirection+0xfe>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_SetPinDirection+0xfa>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	72 c0       	rjmp	.+228    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		}
	} else if (uint8_direction == OUTPUT) {
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f0       	breq	.+2      	; 0x111e <GPIO_SetPinDirection+0x112>
    111c:	6e c0       	rjmp	.+220    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
		switch (uint8_port) {
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	3d 83       	std	Y+5, r19	; 0x05
    1126:	2c 83       	std	Y+4, r18	; 0x04
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	9d 81       	ldd	r25, Y+5	; 0x05
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	91 05       	cpc	r25, r1
    1130:	49 f1       	breq	.+82     	; 0x1184 <GPIO_SetPinDirection+0x178>
    1132:	2c 81       	ldd	r18, Y+4	; 0x04
    1134:	3d 81       	ldd	r19, Y+5	; 0x05
    1136:	22 30       	cpi	r18, 0x02	; 2
    1138:	31 05       	cpc	r19, r1
    113a:	2c f4       	brge	.+10     	; 0x1146 <GPIO_SetPinDirection+0x13a>
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	61 f0       	breq	.+24     	; 0x115c <GPIO_SetPinDirection+0x150>
    1144:	5a c0       	rjmp	.+180    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	71 f1       	breq	.+92     	; 0x11ac <GPIO_SetPinDirection+0x1a0>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	83 30       	cpi	r24, 0x03	; 3
    1156:	91 05       	cpc	r25, r1
    1158:	e9 f1       	breq	.+122    	; 0x11d4 <GPIO_SetPinDirection+0x1c8>
    115a:	4f c0       	rjmp	.+158    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
		case PORT_A:
			SET_BIT(DDRA, uint8_pin);
    115c:	aa e3       	ldi	r26, 0x3A	; 58
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_SetPinDirection+0x16e>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_SetPinDirection+0x16a>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	3b c0       	rjmp	.+118    	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_B:
			SET_BIT(DDRB, uint8_pin);
    1184:	a7 e3       	ldi	r26, 0x37	; 55
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e7 e3       	ldi	r30, 0x37	; 55
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_SetPinDirection+0x196>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_SetPinDirection+0x192>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	27 c0       	rjmp	.+78     	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_C:
			SET_BIT(DDRC, uint8_pin);
    11ac:	a4 e3       	ldi	r26, 0x34	; 52
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e4 e3       	ldi	r30, 0x34	; 52
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_SetPinDirection+0x1be>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_SetPinDirection+0x1ba>
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <GPIO_SetPinDirection+0x1ee>
			break;
		case PORT_D:
			SET_BIT(DDRD, uint8_pin);
    11d4:	a1 e3       	ldi	r26, 0x31	; 49
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_SetPinDirection+0x1e6>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_SetPinDirection+0x1e2>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
			break;
		}
	}
}
    11fa:	27 96       	adiw	r28, 0x07	; 7
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <GPIO_SetPinValue>:

/* setting pin value */
void GPIO_SetPinValue(uint8 uint8_port, uint8 uint8_pin, uint8 uint8_value) {
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	27 97       	sbiw	r28, 0x07	; 7
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
    1224:	4b 83       	std	Y+3, r20	; 0x03
	if (uint8_value == PIN_LOW) {
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 23       	and	r24, r24
    122a:	09 f0       	breq	.+2      	; 0x122e <GPIO_SetPinValue+0x22>
    122c:	74 c0       	rjmp	.+232    	; 0x1316 <GPIO_SetPinValue+0x10a>
		switch (uint8_port) {
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3f 83       	std	Y+7, r19	; 0x07
    1236:	2e 83       	std	Y+6, r18	; 0x06
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	9f 81       	ldd	r25, Y+7	; 0x07
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	59 f1       	breq	.+86     	; 0x1298 <GPIO_SetPinValue+0x8c>
    1242:	2e 81       	ldd	r18, Y+6	; 0x06
    1244:	3f 81       	ldd	r19, Y+7	; 0x07
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	2c f4       	brge	.+10     	; 0x1256 <GPIO_SetPinValue+0x4a>
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	9f 81       	ldd	r25, Y+7	; 0x07
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f0       	breq	.+26     	; 0x126e <GPIO_SetPinValue+0x62>
    1254:	d2 c0       	rjmp	.+420    	; 0x13fa <GPIO_SetPinValue+0x1ee>
    1256:	2e 81       	ldd	r18, Y+6	; 0x06
    1258:	3f 81       	ldd	r19, Y+7	; 0x07
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	89 f1       	breq	.+98     	; 0x12c2 <GPIO_SetPinValue+0xb6>
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	9f 81       	ldd	r25, Y+7	; 0x07
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	09 f4       	brne	.+2      	; 0x126c <GPIO_SetPinValue+0x60>
    126a:	40 c0       	rjmp	.+128    	; 0x12ec <GPIO_SetPinValue+0xe0>
    126c:	c6 c0       	rjmp	.+396    	; 0x13fa <GPIO_SetPinValue+0x1ee>
		case PORT_A:
			CLEAR_BIT(PORTA, uint8_pin);
    126e:	ab e3       	ldi	r26, 0x3B	; 59
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_SetPinValue+0x80>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_SetPinValue+0x7c>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	b1 c0       	rjmp	.+354    	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB, uint8_pin);
    1298:	a8 e3       	ldi	r26, 0x38	; 56
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <GPIO_SetPinValue+0xaa>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <GPIO_SetPinValue+0xa6>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	9c c0       	rjmp	.+312    	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC, uint8_pin);
    12c2:	a5 e3       	ldi	r26, 0x35	; 53
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e3       	ldi	r30, 0x35	; 53
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_SetPinValue+0xd4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_SetPinValue+0xd0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	87 c0       	rjmp	.+270    	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD, uint8_pin);
    12ec:	a2 e3       	ldi	r26, 0x32	; 50
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_SetPinValue+0xfe>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_SetPinValue+0xfa>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	72 c0       	rjmp	.+228    	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		}
	} else if (uint8_value == PIN_HIGH) {
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	09 f0       	breq	.+2      	; 0x131e <GPIO_SetPinValue+0x112>
    131c:	6e c0       	rjmp	.+220    	; 0x13fa <GPIO_SetPinValue+0x1ee>
		switch (uint8_port) {
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3d 83       	std	Y+5, r19	; 0x05
    1326:	2c 83       	std	Y+4, r18	; 0x04
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	49 f1       	breq	.+82     	; 0x1384 <GPIO_SetPinValue+0x178>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	2c f4       	brge	.+10     	; 0x1346 <GPIO_SetPinValue+0x13a>
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	61 f0       	breq	.+24     	; 0x135c <GPIO_SetPinValue+0x150>
    1344:	5a c0       	rjmp	.+180    	; 0x13fa <GPIO_SetPinValue+0x1ee>
    1346:	2c 81       	ldd	r18, Y+4	; 0x04
    1348:	3d 81       	ldd	r19, Y+5	; 0x05
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	71 f1       	breq	.+92     	; 0x13ac <GPIO_SetPinValue+0x1a0>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	e9 f1       	breq	.+122    	; 0x13d4 <GPIO_SetPinValue+0x1c8>
    135a:	4f c0       	rjmp	.+158    	; 0x13fa <GPIO_SetPinValue+0x1ee>
		case PORT_A:
			SET_BIT(PORTA, uint8_pin);
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_SetPinValue+0x16e>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_SetPinValue+0x16a>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	3b c0       	rjmp	.+118    	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_B:
			SET_BIT(PORTB, uint8_pin);
    1384:	a8 e3       	ldi	r26, 0x38	; 56
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_SetPinValue+0x196>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_SetPinValue+0x192>
    13a6:	84 2b       	or	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	27 c0       	rjmp	.+78     	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_C:
			SET_BIT(PORTC, uint8_pin);
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_SetPinValue+0x1be>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_SetPinValue+0x1ba>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <GPIO_SetPinValue+0x1ee>
			break;
		case PORT_D:
			SET_BIT(PORTD, uint8_pin);
    13d4:	a2 e3       	ldi	r26, 0x32	; 50
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_SetPinValue+0x1e6>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_SetPinValue+0x1e2>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
			break;
		}
	}
}
    13fa:	27 96       	adiw	r28, 0x07	; 7
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <GPIO_GetPinValue>:

/* getting pin value */
void GPIO_GetPinValue(uint8 uint8_port, uint8 uint8_pin, uint8 *p_uint8_data) {
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <GPIO_GetPinValue+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <GPIO_GetPinValue+0x8>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <GPIO_GetPinValue+0xa>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	6a 83       	std	Y+2, r22	; 0x02
    141e:	5c 83       	std	Y+4, r21	; 0x04
    1420:	4b 83       	std	Y+3, r20	; 0x03
	switch (uint8_port) {
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3e 83       	std	Y+6, r19	; 0x06
    142a:	2d 83       	std	Y+5, r18	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	49 f1       	breq	.+82     	; 0x1488 <GPIO_GetPinValue+0x7c>
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    1438:	3e 81       	ldd	r19, Y+6	; 0x06
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <GPIO_GetPinValue+0x3e>
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <GPIO_GetPinValue+0x54>
    1448:	5a c0       	rjmp	.+180    	; 0x14fe <GPIO_GetPinValue+0xf2>
    144a:	2d 81       	ldd	r18, Y+5	; 0x05
    144c:	3e 81       	ldd	r19, Y+6	; 0x06
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	71 f1       	breq	.+92     	; 0x14b0 <GPIO_GetPinValue+0xa4>
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	e9 f1       	breq	.+122    	; 0x14d8 <GPIO_GetPinValue+0xcc>
    145e:	4f c0       	rjmp	.+158    	; 0x14fe <GPIO_GetPinValue+0xf2>
	case PORT_A:
		*p_uint8_data = GET_BIT(PINA, uint8_pin);
    1460:	e9 e3       	ldi	r30, 0x39	; 57
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_GetPinValue+0x6e>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_GetPinValue+0x6a>
    147e:	84 23       	and	r24, r20
    1480:	eb 81       	ldd	r30, Y+3	; 0x03
    1482:	fc 81       	ldd	r31, Y+4	; 0x04
    1484:	80 83       	st	Z, r24
    1486:	3b c0       	rjmp	.+118    	; 0x14fe <GPIO_GetPinValue+0xf2>
		break;
	case PORT_B:
		*p_uint8_data = GET_BIT(PINB, uint8_pin);
    1488:	e6 e3       	ldi	r30, 0x36	; 54
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_GetPinValue+0x96>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_GetPinValue+0x92>
    14a6:	84 23       	and	r24, r20
    14a8:	eb 81       	ldd	r30, Y+3	; 0x03
    14aa:	fc 81       	ldd	r31, Y+4	; 0x04
    14ac:	80 83       	st	Z, r24
    14ae:	27 c0       	rjmp	.+78     	; 0x14fe <GPIO_GetPinValue+0xf2>
		break;
	case PORT_C:
		*p_uint8_data = GET_BIT(PINC, uint8_pin);
    14b0:	e3 e3       	ldi	r30, 0x33	; 51
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_GetPinValue+0xbe>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_GetPinValue+0xba>
    14ce:	84 23       	and	r24, r20
    14d0:	eb 81       	ldd	r30, Y+3	; 0x03
    14d2:	fc 81       	ldd	r31, Y+4	; 0x04
    14d4:	80 83       	st	Z, r24
    14d6:	13 c0       	rjmp	.+38     	; 0x14fe <GPIO_GetPinValue+0xf2>
		break;
	case PORT_D:
		*p_uint8_data = GET_BIT(PIND, uint8_pin);
    14d8:	e0 e3       	ldi	r30, 0x30	; 48
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_GetPinValue+0xe6>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_GetPinValue+0xe2>
    14f6:	84 23       	and	r24, r20
    14f8:	eb 81       	ldd	r30, Y+3	; 0x03
    14fa:	fc 81       	ldd	r31, Y+4	; 0x04
    14fc:	80 83       	st	Z, r24
		break;
	}
}
    14fe:	26 96       	adiw	r28, 0x06	; 6
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GPIO_SetPortDirection>:

/* setting port direction */
void GPIO_SetPortDirection(uint8 uint8_port, uint8 uint8_direction) {
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <GPIO_SetPortDirection+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <GPIO_SetPortDirection+0x8>
    1518:	00 d0       	rcall	.+0      	; 0x151a <GPIO_SetPortDirection+0xa>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	6a 83       	std	Y+2, r22	; 0x02
	if (uint8_direction == INPUT) {
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	88 23       	and	r24, r24
    1526:	79 f5       	brne	.+94     	; 0x1586 <GPIO_SetPortDirection+0x76>
		switch (uint8_port) {
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3e 83       	std	Y+6, r19	; 0x06
    1530:	2d 83       	std	Y+5, r18	; 0x05
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	c9 f0       	breq	.+50     	; 0x156e <GPIO_SetPortDirection+0x5e>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <GPIO_SetPortDirection+0x40>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	61 f0       	breq	.+24     	; 0x1566 <GPIO_SetPortDirection+0x56>
    154e:	50 c0       	rjmp	.+160    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
    1550:	2d 81       	ldd	r18, Y+5	; 0x05
    1552:	3e 81       	ldd	r19, Y+6	; 0x06
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	71 f0       	breq	.+28     	; 0x1576 <GPIO_SetPortDirection+0x66>
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	69 f0       	breq	.+26     	; 0x157e <GPIO_SetPortDirection+0x6e>
    1564:	45 c0       	rjmp	.+138    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
		case PORT_A:
			DDRA = 0x00;
    1566:	ea e3       	ldi	r30, 0x3A	; 58
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	10 82       	st	Z, r1
    156c:	41 c0       	rjmp	.+130    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0x00;
    156e:	e7 e3       	ldi	r30, 0x37	; 55
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
    1574:	3d c0       	rjmp	.+122    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0x00;
    1576:	e4 e3       	ldi	r30, 0x34	; 52
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
    157c:	39 c0       	rjmp	.+114    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0x00;
    157e:	e1 e3       	ldi	r30, 0x31	; 49
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	10 82       	st	Z, r1
    1584:	35 c0       	rjmp	.+106    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		}
	} else if (uint8_direction == OUTPUT) {
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 f5       	brne	.+100    	; 0x15f0 <GPIO_SetPortDirection+0xe0>
		switch (uint8_port) {
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <GPIO_SetPortDirection+0xc4>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <GPIO_SetPortDirection+0xa4>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <GPIO_SetPortDirection+0xba>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <GPIO_SetPortDirection+0xe0>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_SetPortDirection+0xce>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <GPIO_SetPortDirection+0xd8>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <GPIO_SetPortDirection+0xe0>
		case PORT_A:
			DDRA = 0xFF;
    15ca:	ea e3       	ldi	r30, 0x3A	; 58
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	80 83       	st	Z, r24
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_B:
			DDRB = 0xFF;
    15d4:	e7 e3       	ldi	r30, 0x37	; 55
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	80 83       	st	Z, r24
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_C:
			DDRC = 0xFF;
    15de:	e4 e3       	ldi	r30, 0x34	; 52
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 83       	st	Z, r24
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <GPIO_SetPortDirection+0xe0>
			break;
		case PORT_D:
			DDRD = 0xFF;
    15e8:	e1 e3       	ldi	r30, 0x31	; 49
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <GPIO_SetPortValue>:

/* setting port value */
void GPIO_SetPortValue(uint8 uint8_port, uint8 uint8_value) {
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_SetPortValue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <GPIO_SetPortValue+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6a 83       	std	Y+2, r22	; 0x02
	switch (uint8_port) {
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	3c 83       	std	Y+4, r19	; 0x04
    161a:	2b 83       	std	Y+3, r18	; 0x03
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	d1 f0       	breq	.+52     	; 0x165a <GPIO_SetPortValue+0x58>
    1626:	2b 81       	ldd	r18, Y+3	; 0x03
    1628:	3c 81       	ldd	r19, Y+4	; 0x04
    162a:	22 30       	cpi	r18, 0x02	; 2
    162c:	31 05       	cpc	r19, r1
    162e:	2c f4       	brge	.+10     	; 0x163a <GPIO_SetPortValue+0x38>
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	61 f0       	breq	.+24     	; 0x1650 <GPIO_SetPortValue+0x4e>
    1638:	1e c0       	rjmp	.+60     	; 0x1676 <GPIO_SetPortValue+0x74>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <GPIO_SetPortValue+0x62>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	91 05       	cpc	r25, r1
    164c:	81 f0       	breq	.+32     	; 0x166e <GPIO_SetPortValue+0x6c>
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <GPIO_SetPortValue+0x74>
	case PORT_A:
		PORTA = uint8_value;
    1650:	eb e3       	ldi	r30, 0x3B	; 59
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	80 83       	st	Z, r24
    1658:	0e c0       	rjmp	.+28     	; 0x1676 <GPIO_SetPortValue+0x74>
		break;
	case PORT_B:
		PORTB = uint8_value;
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	80 83       	st	Z, r24
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <GPIO_SetPortValue+0x74>
		break;
	case PORT_C:
		PORTC = uint8_value;
    1664:	e5 e3       	ldi	r30, 0x35	; 53
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	80 83       	st	Z, r24
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <GPIO_SetPortValue+0x74>
		break;
	case PORT_D:
		PORTD = uint8_value;
    166e:	e2 e3       	ldi	r30, 0x32	; 50
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	80 83       	st	Z, r24
		break;
	}
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <GPIO_GetPortValue>:

/* getting port value */
void GPIO_GetPortValue(uint8 uint8_port, uint8 *p_uint8_data) {
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <GPIO_GetPortValue+0x6>
    168a:	00 d0       	rcall	.+0      	; 0x168c <GPIO_GetPortValue+0x8>
    168c:	0f 92       	push	r0
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	7b 83       	std	Y+3, r23	; 0x03
    1696:	6a 83       	std	Y+2, r22	; 0x02
	switch (uint8_port) {
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3d 83       	std	Y+5, r19	; 0x05
    16a0:	2c 83       	std	Y+4, r18	; 0x04
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	e1 f0       	breq	.+56     	; 0x16e4 <GPIO_GetPortValue+0x60>
    16ac:	2c 81       	ldd	r18, Y+4	; 0x04
    16ae:	3d 81       	ldd	r19, Y+5	; 0x05
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <GPIO_GetPortValue+0x3c>
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <GPIO_GetPortValue+0x52>
    16be:	26 c0       	rjmp	.+76     	; 0x170c <GPIO_GetPortValue+0x88>
    16c0:	2c 81       	ldd	r18, Y+4	; 0x04
    16c2:	3d 81       	ldd	r19, Y+5	; 0x05
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	a1 f0       	breq	.+40     	; 0x16f2 <GPIO_GetPortValue+0x6e>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	b1 f0       	breq	.+44     	; 0x1700 <GPIO_GetPortValue+0x7c>
    16d4:	1b c0       	rjmp	.+54     	; 0x170c <GPIO_GetPortValue+0x88>
	case PORT_A:
		*p_uint8_data = PINA;
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	ea 81       	ldd	r30, Y+2	; 0x02
    16de:	fb 81       	ldd	r31, Y+3	; 0x03
    16e0:	80 83       	st	Z, r24
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <GPIO_GetPortValue+0x88>
		break;
	case PORT_B:
		*p_uint8_data = PINB;
    16e4:	e6 e3       	ldi	r30, 0x36	; 54
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	ea 81       	ldd	r30, Y+2	; 0x02
    16ec:	fb 81       	ldd	r31, Y+3	; 0x03
    16ee:	80 83       	st	Z, r24
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <GPIO_GetPortValue+0x88>
		break;
	case PORT_C:
		*p_uint8_data = PINC;
    16f2:	e3 e3       	ldi	r30, 0x33	; 51
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	ea 81       	ldd	r30, Y+2	; 0x02
    16fa:	fb 81       	ldd	r31, Y+3	; 0x03
    16fc:	80 83       	st	Z, r24
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <GPIO_GetPortValue+0x88>
		break;
	case PORT_D:
		*p_uint8_data = PIND;
    1700:	e0 e3       	ldi	r30, 0x30	; 48
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	ea 81       	ldd	r30, Y+2	; 0x02
    1708:	fb 81       	ldd	r31, Y+3	; 0x03
    170a:	80 83       	st	Z, r24
		break;
	}
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <ExtInt0_Init>:
#include "../../STD_TYPES.h"
#include "../../Comman_Macros.h"
#include "EXT_Config.h"
#include "EXT_Private.h"

void ExtInt0_Init() {
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	/* set interrupt sense control in INT0 to rising edge configuration */
	SET_BIT(MCUCR, MCUCR_ISC00);
    1724:	a5 e5       	ldi	r26, 0x55	; 85
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e5 e5       	ldi	r30, 0x55	; 85
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	81 60       	ori	r24, 0x01	; 1
    1730:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
    1732:	a5 e5       	ldi	r26, 0x55	; 85
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e5 e5       	ldi	r30, 0x55	; 85
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	82 60       	ori	r24, 0x02	; 2
    173e:	8c 93       	st	X, r24

	/* enable INT0 */
	SET_BIT(GICR, GICR_INT0);
    1740:	ab e5       	ldi	r26, 0x5B	; 91
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	eb e5       	ldi	r30, 0x5B	; 91
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	8c 93       	st	X, r24
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <ExtInt1_Init>:

void ExtInt1_Init() {
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	/* set interrupt sense control in INT1 to rising edge configuration */
	SET_BIT(MCUCR, MCUCR_ISC10);
    175c:	a5 e5       	ldi	r26, 0x55	; 85
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e5 e5       	ldi	r30, 0x55	; 85
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC11);
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	88 60       	ori	r24, 0x08	; 8
    1776:	8c 93       	st	X, r24

	/* enable INT1 */
	SET_BIT(GICR, GICR_INT1);
    1778:	ab e5       	ldi	r26, 0x5B	; 91
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	eb e5       	ldi	r30, 0x5B	; 91
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	80 68       	ori	r24, 0x80	; 128
    1784:	8c 93       	st	X, r24
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <ExtInt2_Init>:

void ExtInt2_Init() {
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	/* set interrupt sense control in INT2 to rising edge configuration */
	SET_BIT(MCUCSR, MCUCSR_ISC2);
    1794:	a4 e5       	ldi	r26, 0x54	; 84
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e4 e5       	ldi	r30, 0x54	; 84
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	8c 93       	st	X, r24

	/* enable INT2 */
	SET_BIT(GICR, GICR_INT1);
    17a2:	ab e5       	ldi	r26, 0x5B	; 91
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	eb e5       	ldi	r30, 0x5B	; 91
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 68       	ori	r24, 0x80	; 128
    17ae:	8c 93       	st	X, r24
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <ADC_Init>:
#include "../../STD_TYPES.h"
#include "../../Comman_Macros.h"
#include "ADC_Config.h"
#include "ADC_Private.h"

void ADC_Init(void) {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	/* internal 2.56V voltage reference */
	SET_BIT(ADMUX, ADMUX_REFS0);
    17be:	a7 e2       	ldi	r26, 0x27	; 39
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e7 e2       	ldi	r30, 0x27	; 39
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 64       	ori	r24, 0x40	; 64
    17ca:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS1);
    17cc:	a7 e2       	ldi	r26, 0x27	; 39
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e7 e2       	ldi	r30, 0x27	; 39
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 93       	st	X, r24

	/* active right adjust*/
	CLEAR_BIT(ADMUX, ADMUX_ADLAR);
    17da:	a7 e2       	ldi	r26, 0x27	; 39
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e7 e2       	ldi	r30, 0x27	; 39
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	8c 93       	st	X, r24

	/* ADC clock pre-scaler */
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    17e8:	a6 e2       	ldi	r26, 0x26	; 38
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e2       	ldi	r30, 0x26	; 38
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	84 60       	ori	r24, 0x04	; 4
    17f4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    17f6:	a6 e2       	ldi	r26, 0x26	; 38
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e6 e2       	ldi	r30, 0x26	; 38
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	82 60       	ori	r24, 0x02	; 2
    1802:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    1804:	a6 e2       	ldi	r26, 0x26	; 38
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e6 e2       	ldi	r30, 0x26	; 38
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	8c 93       	st	X, r24

	/* enable ADC */
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    1812:	a6 e2       	ldi	r26, 0x26	; 38
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e6 e2       	ldi	r30, 0x26	; 38
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 68       	ori	r24, 0x80	; 128
    181e:	8c 93       	st	X, r24
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <ADC_ReadChannelConversionResult>:

uint16 ADC_ReadChannelConversionResult(uint8 uint8Channel) {
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	89 83       	std	Y+1, r24	; 0x01
	/* clear the MUX bits */
	ADMUX &= 0xE0;
    1832:	a7 e2       	ldi	r26, 0x27	; 39
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e7 e2       	ldi	r30, 0x27	; 39
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 7e       	andi	r24, 0xE0	; 224
    183e:	8c 93       	st	X, r24

	/* Set the required channel into MUX */
	ADMUX |= uint8Channel;
    1840:	a7 e2       	ldi	r26, 0x27	; 39
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e7 e2       	ldi	r30, 0x27	; 39
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	90 81       	ld	r25, Z
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	89 2b       	or	r24, r25
    184e:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    1850:	a6 e2       	ldi	r26, 0x26	; 38
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 64       	ori	r24, 0x40	; 64
    185c:	8c 93       	st	X, r24

	/* polling until the conversion flag is set */
	while ((GET_BIT(ADCSRA, ADCSRA_ADIF)) == 0)
    185e:	e6 e2       	ldi	r30, 0x26	; 38
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	80 71       	andi	r24, 0x10	; 16
    186a:	90 70       	andi	r25, 0x00	; 0
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	b9 f3       	breq	.-18     	; 0x185e <ADC_ReadChannelConversionResult+0x38>
		;

	/* clear the conversion flag */
	SET_BIT(ADCSRA, ADCSRA_ADIF);
    1870:	a6 e2       	ldi	r26, 0x26	; 38
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e6 e2       	ldi	r30, 0x26	; 38
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	8c 93       	st	X, r24

	/* return the conversion result */
	return ADCL_H;
    187e:	e4 e2       	ldi	r30, 0x24	; 36
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
}
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <Seven_Seg_Init>:
#include "../../MCAL/GPIO/GPIO_Config.h"
#include "../../MCAL/ADC/ADC_Private.h"
#include "../../MCAL/ADC/ADC_Config.h"
#include "seven_seg.h"
#include <util/delay.h>
void Seven_Seg_Init(void){
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(Seven_Seg_PORT,Seven_Seg_PIN0,OUTPUT);
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	64 e0       	ldi	r22, 0x04	; 4
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(Seven_Seg_PORT,Seven_Seg_PIN1,OUTPUT);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	65 e0       	ldi	r22, 0x05	; 5
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(Seven_Seg_PORT,Seven_Seg_PIN2,OUTPUT);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	66 e0       	ldi	r22, 0x06	; 6
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(Seven_Seg_PORT,Seven_Seg_PIN3,OUTPUT);
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	67 e0       	ldi	r22, 0x07	; 7
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN0,PIN_LOW);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	64 e0       	ldi	r22, 0x04	; 4
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN1,PIN_LOW);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN2,PIN_LOW);
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	66 e0       	ldi	r22, 0x06	; 6
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN3,PIN_LOW);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	67 e0       	ldi	r22, 0x07	; 7
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <Seven_Seg_Display>:
void Seven_Seg_Display(uint8 NUM){
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <Seven_Seg_Display+0x6>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
	switch (NUM) {
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	3b 83       	std	Y+3, r19	; 0x03
    1902:	2a 83       	std	Y+2, r18	; 0x02
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	91 05       	cpc	r25, r1
    190c:	59 f1       	breq	.+86     	; 0x1964 <Seven_Seg_Display+0x78>
    190e:	2a 81       	ldd	r18, Y+2	; 0x02
    1910:	3b 81       	ldd	r19, Y+3	; 0x03
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	2c f4       	brge	.+10     	; 0x1922 <Seven_Seg_Display+0x36>
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f0       	breq	.+26     	; 0x193a <Seven_Seg_Display+0x4e>
    1920:	5f c0       	rjmp	.+190    	; 0x19e0 <Seven_Seg_Display+0xf4>
    1922:	2a 81       	ldd	r18, Y+2	; 0x02
    1924:	3b 81       	ldd	r19, Y+3	; 0x03
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	89 f1       	breq	.+98     	; 0x198e <Seven_Seg_Display+0xa2>
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <Seven_Seg_Display+0x4c>
    1936:	40 c0       	rjmp	.+128    	; 0x19b8 <Seven_Seg_Display+0xcc>
    1938:	53 c0       	rjmp	.+166    	; 0x19e0 <Seven_Seg_Display+0xf4>
		case 0:
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN0,PIN_LOW);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN1,PIN_LOW);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN2,PIN_LOW);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN3,PIN_LOW);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	67 e0       	ldi	r22, 0x07	; 7
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    1962:	3e c0       	rjmp	.+124    	; 0x19e0 <Seven_Seg_Display+0xf4>
			break;
		case 1:
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN0,PIN_HIGH);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	64 e0       	ldi	r22, 0x04	; 4
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN1,PIN_LOW);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	65 e0       	ldi	r22, 0x05	; 5
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN2,PIN_LOW);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	66 e0       	ldi	r22, 0x06	; 6
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN3,PIN_LOW);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	67 e0       	ldi	r22, 0x07	; 7
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    198c:	29 c0       	rjmp	.+82     	; 0x19e0 <Seven_Seg_Display+0xf4>
			break;
		case 2:
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN0,PIN_LOW);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	64 e0       	ldi	r22, 0x04	; 4
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN1,PIN_HIGH);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	65 e0       	ldi	r22, 0x05	; 5
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN2,PIN_LOW);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	66 e0       	ldi	r22, 0x06	; 6
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN3,PIN_LOW);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	67 e0       	ldi	r22, 0x07	; 7
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <Seven_Seg_Display+0xf4>
			break;
		case 3:
			GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN0,PIN_HIGH);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN1,PIN_HIGH);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	65 e0       	ldi	r22, 0x05	; 5
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN2,PIN_LOW);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	66 e0       	ldi	r22, 0x06	; 6
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
				GPIO_SetPinValue(Seven_Seg_PORT,Seven_Seg_PIN3,PIN_LOW);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	67 e0       	ldi	r22, 0x07	; 7
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
			break;
		default:
			break;
	}
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <PIR_Init>:
#include "../../MCAL/External Interrupt/EXT_Private.h"
#include "../../MCAL/External Interrupt/EXT_Config.h"
#include "../../MCAL/Global Interrupt/GIE_Config.h"
#include "PIR.h"

void PIR_Init(void) {
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	// input pin
	GPIO_SetPinDirection(PIR_PORT, PIR_PIN, INPUT);
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	67 e0       	ldi	r22, 0x07	; 7
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	// output LED
	GPIO_SetPinDirection(PORT_A, PIN2, OUTPUT);
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <PIR_Motion>:

void PIR_Motion(uint8 *Motion) {
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <PIR_Motion+0x6>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
	//check if pin == 1 or  = 0
	uint8 L_Motion = *Motion;
    1a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a20:	fb 81       	ldd	r31, Y+3	; 0x03
    1a22:	80 81       	ld	r24, Z
    1a24:	89 83       	std	Y+1, r24	; 0x01
	GPIO_GetPinValue(PIR_PORT, PIR_PIN, &L_Motion);
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	67 e0       	ldi	r22, 0x07	; 7
    1a2a:	9e 01       	movw	r18, r28
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	a9 01       	movw	r20, r18
    1a32:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
	if (L_Motion == 1) {
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	29 f4       	brne	.+10     	; 0x1a46 <PIR_Motion+0x38>
		*Motion = 1;
    1a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 83       	st	Z, r24
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <PIR_Motion+0x3e>
	} else {
		*Motion = 0;
    1a46:	ea 81       	ldd	r30, Y+2	; 0x02
    1a48:	fb 81       	ldd	r31, Y+3	; 0x03
    1a4a:	10 82       	st	Z, r1
	}
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <MOTOR_Init>:
#include "../../MCAL/TIMER0/TIMER0_Private.h"
#include "../../MCAL/GPIO/GPIO_Config.h"
#include "../../MCAL/GPIO/GPIO_Private.h"
#include "MOTOR.h"

void MOTOR_Init(void) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	/* set the output pin for motor */
	GPIO_SetPinDirection(MOTOR_PORT, MOTOR_PIN, OUTPUT);
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	63 e0       	ldi	r22, 0x03	; 3
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	/* configure the timer0 in fast PWM mode with pre-scaler 8 */
	TIMER0_Init(TIMER0_FAST_PWM_MODE, CLK_8_PRESCALER);
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TIMER0_Init>
	/* configure the timer0 in non inverted mode */
	TIMER0_SetFastPwdMode(TIMER0PWM_NON_INVERTED);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	0e 94 b1 07 	call	0xf62	; 0xf62 <TIMER0_SetFastPwdMode>
	/* as default the motor is off */
	TIMER0_SetCompMatchValue(0);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	0e 94 a3 07 	call	0xf46	; 0xf46 <TIMER0_SetCompMatchValue>
}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <MOTOR_Speed>:

void MOTOR_Speed(uint8 speed) {
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	0f 92       	push	r0
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	if (speed == 0) {
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 23       	and	r24, r24
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <MOTOR_Speed+0x1a>
		/* motor is off */
		TIMER0_SetCompMatchValue(0);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	0e 94 a3 07 	call	0xf46	; 0xf46 <TIMER0_SetCompMatchValue>
    1a9c:	11 c0       	rjmp	.+34     	; 0x1ac0 <MOTOR_Speed+0x3c>
	} else if (speed == 1) {
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <MOTOR_Speed+0x28>
		/* first speed with duty cycle 33% */
		TIMER0_SetCompMatchValue(84);
    1aa4:	84 e5       	ldi	r24, 0x54	; 84
    1aa6:	0e 94 a3 07 	call	0xf46	; 0xf46 <TIMER0_SetCompMatchValue>
    1aaa:	0a c0       	rjmp	.+20     	; 0x1ac0 <MOTOR_Speed+0x3c>
	} else if (speed == 2) {
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <MOTOR_Speed+0x36>
		/* first speed with duty cycle 75% */
		TIMER0_SetCompMatchValue(192);
    1ab2:	80 ec       	ldi	r24, 0xC0	; 192
    1ab4:	0e 94 a3 07 	call	0xf46	; 0xf46 <TIMER0_SetCompMatchValue>
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <MOTOR_Speed+0x3c>
	} else {
		/* first speed with duty cycle 100% */
		TIMER0_SetCompMatchValue(255);
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	0e 94 a3 07 	call	0xf46	; 0xf46 <TIMER0_SetCompMatchValue>
	}
}
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LM35_Read>:
#include "../../MCAL/GPIO/GPIO_Config.h"
#include "../../MCAL/ADC/ADC_Private.h"
#include "../../MCAL/ADC/ADC_Config.h"
#include "LM35.h"

void LM35_Read(uint8 *Temperture) {
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <LM35_Read+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <LM35_Read+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Adc_value;
	Adc_value = ADC_ReadChannelConversionResult(LM_35_CH);
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	0e 94 13 0c 	call	0x1826	; 0x1826 <ADC_ReadChannelConversionResult>
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	*Temperture = ((Adc_value * 2.56 * 100) / 1023);
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	cc 01       	movw	r24, r24
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	2a e0       	ldi	r18, 0x0A	; 10
    1afe:	37 ed       	ldi	r19, 0xD7	; 215
    1b00:	43 e2       	ldi	r20, 0x23	; 35
    1b02:	50 e4       	ldi	r21, 0x40	; 64
    1b04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	48 ec       	ldi	r20, 0xC8	; 200
    1b16:	52 e4       	ldi	r21, 0x42	; 66
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 ec       	ldi	r19, 0xC0	; 192
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	eb 81       	ldd	r30, Y+3	; 0x03
    1b42:	fc 81       	ldd	r31, Y+4	; 0x04
    1b44:	80 83       	st	Z, r24
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <LED_init>:
 *                              Functions Definitions                          *
 *******************************************************************************/

            /*---------- A function to initialize the LED ---------*/
void LED_init(void)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDirection(LED_PORT,LED_PIN,OUTPUT);		/*Make the LED pin output pin*/
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>

	GPIO_SetPinValue(LED_PORT,LED_PIN,PIN_LOW);			/*Turn off the LED Initially*/
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
};
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <LED_ON>:

		   /*---------- A function to Turn ON the LED -------------*/
void LED_ON(void)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinValue(LED_PORT,LED_PIN,PIN_HIGH);			/* Turn ON the LED */
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>

};
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <LED_OFF>:
		  /*---------- A function to Turn OFF the LED -------------*/
void LED_OFF(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinValue(LED_PORT,LED_PIN,PIN_LOW);			/* Turn OFF the LED */
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>

};
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <LDR_READ>:
/*******************************************************************************
 *                              Functions Definitions                          *
 *******************************************************************************/

/*---------- A function to read the Digital value Of LDR---------*/
void LDR_READ(uint8 *LDR_Precentage) {
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <LDR_READ+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <LDR_READ+0x8>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 digital_value = ADC_ReadChannelConversionResult(LDR_PIN);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	0e 94 13 0c 	call	0x1826	; 0x1826 <ADC_ReadChannelConversionResult>
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
	*LDR_Precentage = ((200 - digital_value) * 100) / 200;
    1bc0:	28 ec       	ldi	r18, 0xC8	; 200
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	28 1b       	sub	r18, r24
    1bca:	39 0b       	sbc	r19, r25
    1bcc:	84 e6       	ldi	r24, 0x64	; 100
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	24 9f       	mul	r18, r20
    1bd4:	c0 01       	movw	r24, r0
    1bd6:	25 9f       	mul	r18, r21
    1bd8:	90 0d       	add	r25, r0
    1bda:	34 9f       	mul	r19, r20
    1bdc:	90 0d       	add	r25, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	28 ec       	ldi	r18, 0xC8	; 200
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	b9 01       	movw	r22, r18
    1be6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
    1bea:	cb 01       	movw	r24, r22
    1bec:	eb 81       	ldd	r30, Y+3	; 0x03
    1bee:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf0:	80 83       	st	Z, r24
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <LCD_SendCommand>:
#include "../../Comman_Macros.h"
#include "../../MCAL/GPIO/GPIO_Config.h"
#include "LCD.h"
#include <util/delay.h>

void LCD_SendCommand(uint8 uint8_command) {
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	2f 97       	sbiw	r28, 0x0f	; 15
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
	/* set RS pin to low...RS low => command  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, PIN_LOW);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	/* set RW pin to low...RW low => write  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	/* send the command to data pin in LCD */
	GPIO_SetPortValue(LCD_DATA_PORT, uint8_command);
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c2e:	0e 94 01 0b 	call	0x1602	; 0x1602 <GPIO_SetPortValue>
	/* set enable pin to high then low to generate pulse */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e4       	ldi	r27, 0x40	; 64
    1c44:	8b 87       	std	Y+11, r24	; 0x0b
    1c46:	9c 87       	std	Y+12, r25	; 0x0c
    1c48:	ad 87       	std	Y+13, r26	; 0x0d
    1c4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	4a e7       	ldi	r20, 0x7A	; 122
    1c5a:	55 e4       	ldi	r21, 0x45	; 69
    1c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	8f 83       	std	Y+7, r24	; 0x07
    1c66:	98 87       	std	Y+8, r25	; 0x08
    1c68:	a9 87       	std	Y+9, r26	; 0x09
    1c6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e8       	ldi	r20, 0x80	; 128
    1c7a:	5f e3       	ldi	r21, 0x3F	; 63
    1c7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_SendCommand+0x8e>
		__ticks = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <LCD_SendCommand+0x10c>
	else if (__tmp > 65535)
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	4c f5       	brge	.+82     	; 0x1cf8 <LCD_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e2       	ldi	r20, 0x20	; 32
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <LCD_SendCommand+0xee>
    1cd0:	80 e9       	ldi	r24, 0x90	; 144
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_SendCommand+0xdc>
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	69 f7       	brne	.-38     	; 0x1cd0 <LCD_SendCommand+0xd0>
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <LCD_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfa:	78 85       	ldd	r23, Y+8	; 0x08
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9e 83       	std	Y+6, r25	; 0x06
    1d0a:	8d 83       	std	Y+5, r24	; 0x05
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_SendCommand+0x118>
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	62 e0       	ldi	r22, 0x02	; 2
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
}
    1d2a:	2f 96       	adiw	r28, 0x0f	; 15
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <LCD_SendData>:

void LCD_SendData(uint8 uint8_data) {
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	2f 97       	sbiw	r28, 0x0f	; 15
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
	/* set RS pin to high...RS high => data  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, PIN_HIGH);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	/* set RW pin to low...RW low => write  */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, PIN_LOW);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	/* send the command to data pin in LCD */
	GPIO_SetPortValue(LCD_DATA_PORT, uint8_data);
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d6a:	0e 94 01 0b 	call	0x1602	; 0x1602 <GPIO_SetPortValue>
	/* set enable pin to high then low to generate pulse */
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_HIGH);
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	62 e0       	ldi	r22, 0x02	; 2
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	b0 e4       	ldi	r27, 0x40	; 64
    1d80:	8b 87       	std	Y+11, r24	; 0x0b
    1d82:	9c 87       	std	Y+12, r25	; 0x0c
    1d84:	ad 87       	std	Y+13, r26	; 0x0d
    1d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	55 e4       	ldi	r21, 0x45	; 69
    1d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8f 83       	std	Y+7, r24	; 0x07
    1da2:	98 87       	std	Y+8, r25	; 0x08
    1da4:	a9 87       	std	Y+9, r26	; 0x09
    1da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_SendData+0x8e>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_SendData+0x10c>
	else if (__tmp > 65535)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_SendData+0xee>
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_SendData+0xdc>
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_SendData+0xd0>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_SendData+0x118>
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	GPIO_SetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, PIN_LOW);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	62 e0       	ldi	r22, 0x02	; 2
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
}
    1e66:	2f 96       	adiw	r28, 0x0f	; 15
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <LCD_Init>:

void LCD_Init(void) {
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	2e 97       	sbiw	r28, 0x0e	; 14
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
	/* set the PORTA output for the data of LCD */
	GPIO_SetPortDirection(LCD_DATA_PORT, OUTPUT);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_SetPortDirection>
	/* set the pin 0,1,2 in PORTB output for control of LCD */
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, OUTPUT);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, OUTPUT);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, OUTPUT);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e2       	ldi	r26, 0x20	; 32
    1eb8:	b2 e4       	ldi	r27, 0x42	; 66
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	ad 87       	std	Y+13, r26	; 0x0d
    1ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	55 e4       	ldi	r21, 0x45	; 69
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8f 83       	std	Y+7, r24	; 0x07
    1edc:	98 87       	std	Y+8, r25	; 0x08
    1ede:	a9 87       	std	Y+9, r26	; 0x09
    1ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <LCD_Init+0x8c>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <LCD_Init+0x10a>
	else if (__tmp > 65535)
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <LCD_Init+0xec>
    1f46:	80 e9       	ldi	r24, 0x90	; 144
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_Init+0xda>
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <LCD_Init+0xce>
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_Init+0x116>
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
	/* wait for 40ms */
	_delay_ms(40);
	/* set LCD configuration to 2 lines and 5*8 font size */
	LCD_SendCommand(LCD_TWO_LINE_EIGHT_BIT_MODE);
    1f96:	88 e3       	ldi	r24, 0x38	; 56
    1f98:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_SendCommand>
	/* turn on the LCD and disable showing a cursor */
	LCD_SendCommand(LCD_CURSOR_OFF);
    1f9c:	8c e0       	ldi	r24, 0x0C	; 12
    1f9e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_SendCommand>
	/* clear display */
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_SendCommand>
}
    1fa8:	2e 96       	adiw	r28, 0x0e	; 14
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_DisplayString>:

void LCD_DisplayString(const uint8 *uint8_str) {
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <LCD_DisplayString+0x6>
    1fc0:	0f 92       	push	r0
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	9b 83       	std	Y+3, r25	; 0x03
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	0e c0       	rjmp	.+28     	; 0x1fea <LCD_DisplayString+0x30>
	/* loop until reach the last char of sting */
	while (uint8_str[i] != '\0') {
		/* send char by char of the string to the LCD */
		LCD_SendData(uint8_str[i]);
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e2 0f       	add	r30, r18
    1fdc:	f3 1f       	adc	r31, r19
    1fde:	80 81       	ld	r24, Z
    1fe0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_SendData>
		/* increment the counter to the next char */
		i++;
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	8f 5f       	subi	r24, 0xFF	; 255
    1fe8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_DisplayString(const uint8 *uint8_str) {
	uint8 i = 0;
	/* loop until reach the last char of sting */
	while (uint8_str[i] != '\0') {
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 23       	and	r24, r24
    1ffe:	39 f7       	brne	.-50     	; 0x1fce <LCD_DisplayString+0x14>
		/* send char by char of the string to the LCD */
		LCD_SendData(uint8_str[i]);
		/* increment the counter to the next char */
		i++;
	}
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <LCD_NumberToString>:

void LCD_NumberToString(sint32 data) {
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	6c 97       	sbiw	r28, 0x1c	; 28
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	69 8f       	std	Y+25, r22	; 0x19
    2022:	7a 8f       	std	Y+26, r23	; 0x1a
    2024:	8b 8f       	std	Y+27, r24	; 0x1b
    2026:	9c 8f       	std	Y+28, r25	; 0x1c
	/* array to hold each digit ASCII value */
	uint8 str[16];
	uint16 i, rem, len = 0, n;
    2028:	1c 82       	std	Y+4, r1	; 0x04
    202a:	1b 82       	std	Y+3, r1	; 0x03
	n = data;
    202c:	89 8d       	ldd	r24, Y+25	; 0x19
    202e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
	/* if the number send is zero then print it */
	if (n == 0) {
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	99 f4       	brne	.+38     	; 0x2062 <LCD_NumberToString+0x56>
		LCD_SendData('0');
    203c:	80 e3       	ldi	r24, 0x30	; 48
    203e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_SendData>
    2042:	63 c0       	rjmp	.+198    	; 0x210a <LCD_NumberToString+0xfe>
		return;
	}
	/* loop to count digit in number */
	while (n != 0) {
		len++;
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	9c 83       	std	Y+4, r25	; 0x04
    204c:	8b 83       	std	Y+3, r24	; 0x03
		n /= 10;
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	2a e0       	ldi	r18, 0x0A	; 10
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	b9 01       	movw	r22, r18
    2058:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__udivmodhi4>
    205c:	cb 01       	movw	r24, r22
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
	if (n == 0) {
		LCD_SendData('0');
		return;
	}
	/* loop to count digit in number */
	while (n != 0) {
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <LCD_NumberToString+0x38>
		len++;
		n /= 10;
	}
	/* loop to assign each digit in the array to send it to LCD */
	for (i = 0; i < len; i++) {
    206a:	18 86       	std	Y+8, r1	; 0x08
    206c:	1f 82       	std	Y+7, r1	; 0x07
    206e:	39 c0       	rjmp	.+114    	; 0x20e2 <LCD_NumberToString+0xd6>
		/* get the last digit in number */
		rem = data % 10;
    2070:	89 8d       	ldd	r24, Y+25	; 0x19
    2072:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2074:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2076:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2078:	2a e0       	ldi	r18, 0x0A	; 10
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodsi4>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
		/* divide the number by 10 to remove the last digit after getting it */
		data = data / 10;
    2090:	89 8d       	ldd	r24, Y+25	; 0x19
    2092:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2094:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2096:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2098:	2a e0       	ldi	r18, 0x0A	; 10
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodsi4>
    20a8:	da 01       	movw	r26, r20
    20aa:	c9 01       	movw	r24, r18
    20ac:	89 8f       	std	Y+25, r24	; 0x19
    20ae:	9a 8f       	std	Y+26, r25	; 0x1a
    20b0:	ab 8f       	std	Y+27, r26	; 0x1b
    20b2:	bc 8f       	std	Y+28, r27	; 0x1c
		/* assign the digit at the last of array */
		str[len - (i + 1)] = rem + '0';
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	98 85       	ldd	r25, Y+8	; 0x08
    20b8:	9c 01       	movw	r18, r24
    20ba:	20 95       	com	r18
    20bc:	30 95       	com	r19
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	28 0f       	add	r18, r24
    20c4:	39 1f       	adc	r19, r25
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	48 2f       	mov	r20, r24
    20ca:	40 5d       	subi	r20, 0xD0	; 208
    20cc:	ce 01       	movw	r24, r28
    20ce:	09 96       	adiw	r24, 0x09	; 9
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	40 83       	st	Z, r20
	while (n != 0) {
		len++;
		n /= 10;
	}
	/* loop to assign each digit in the array to send it to LCD */
	for (i = 0; i < len; i++) {
    20d8:	8f 81       	ldd	r24, Y+7	; 0x07
    20da:	98 85       	ldd	r25, Y+8	; 0x08
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	98 87       	std	Y+8, r25	; 0x08
    20e0:	8f 83       	std	Y+7, r24	; 0x07
    20e2:	2f 81       	ldd	r18, Y+7	; 0x07
    20e4:	38 85       	ldd	r19, Y+8	; 0x08
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	28 17       	cp	r18, r24
    20ec:	39 07       	cpc	r19, r25
    20ee:	08 f4       	brcc	.+2      	; 0x20f2 <LCD_NumberToString+0xe6>
    20f0:	bf cf       	rjmp	.-130    	; 0x2070 <LCD_NumberToString+0x64>
		data = data / 10;
		/* assign the digit at the last of array */
		str[len - (i + 1)] = rem + '0';
	}
	/* put the null character */
	str[len] = '\0';
    20f2:	2b 81       	ldd	r18, Y+3	; 0x03
    20f4:	3c 81       	ldd	r19, Y+4	; 0x04
    20f6:	ce 01       	movw	r24, r28
    20f8:	09 96       	adiw	r24, 0x09	; 9
    20fa:	fc 01       	movw	r30, r24
    20fc:	e2 0f       	add	r30, r18
    20fe:	f3 1f       	adc	r31, r19
    2100:	10 82       	st	Z, r1
	/* display this number as string in LCD */
	LCD_DisplayString(str);
    2102:	ce 01       	movw	r24, r28
    2104:	09 96       	adiw	r24, 0x09	; 9
    2106:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
}
    210a:	6c 96       	adiw	r28, 0x1c	; 28
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_MoveCursor>:

void LCD_MoveCursor(uint8 row, uint8 column) {
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_MoveCursor+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <LCD_MoveCursor+0x8>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	6b 83       	std	Y+3, r22	; 0x03
	/* variable to know which address in the LCD will to cursor moved to */
	uint8 LCD_address = 0;
    212e:	19 82       	std	Y+1, r1	; 0x01
	/* check which row is chosen */
	switch (row) {
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3d 83       	std	Y+5, r19	; 0x05
    2138:	2c 83       	std	Y+4, r18	; 0x04
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	31 f0       	breq	.+12     	; 0x214e <LCD_MoveCursor+0x32>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	21 30       	cpi	r18, 0x01	; 1
    2148:	31 05       	cpc	r19, r1
    214a:	21 f0       	breq	.+8      	; 0x2154 <LCD_MoveCursor+0x38>
    214c:	06 c0       	rjmp	.+12     	; 0x215a <LCD_MoveCursor+0x3e>
	case 0:
		LCD_address = column;
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	03 c0       	rjmp	.+6      	; 0x215a <LCD_MoveCursor+0x3e>
		break;
	case 1:
		/* the first address in the second line is 0x40 then add it to the LCD address */
		LCD_address = column + 0x40;
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	80 5c       	subi	r24, 0xC0	; 192
    2158:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* move the LCD cursor to the specific address location */
	LCD_SendCommand(LCD_CURSOR_POSITION | LCD_address);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	80 68       	ori	r24, 0x80	; 128
    215e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_SendCommand>
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	/* send the clear screen command to the LCD */
	LCD_SendCommand(LCD_CLEAR_DISPLAY);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_SendCommand>
}
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 column, const uint8 *Str) {
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <LCD_displayStringRowColumn+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <LCD_displayStringRowColumn+0x8>
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	6a 83       	std	Y+2, r22	; 0x02
    2196:	5c 83       	std	Y+4, r21	; 0x04
    2198:	4b 83       	std	Y+3, r20	; 0x03
	/* go to to the required LCD position */
	LCD_MoveCursor(row, column);
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	6a 81       	ldd	r22, Y+2	; 0x02
    219e:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
	/* display the string */
	LCD_DisplayString(Str);
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <KPD_GetPressedKey>:
#include "../../STD_TYPES.h"
#include "../../Comman_Macros.h"
#include "KEYPAD.h"
#include "../../MCAL/GPIO/GPIO_Config.h"

uint8 KPD_GetPressedKey(void) {
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <KPD_GetPressedKey+0x6>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <KPD_GetPressedKey+0x8>
    21c0:	0f 92       	push	r0
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
	/* value of the pressed key and initial has value of no pressed key */
	uint8 pressedKey = KPD_NO_PRESSED_KEY;
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	8b 83       	std	Y+3, r24	; 0x03
	static uint8 kpdColArr[COL_NUM] = { KPD_COL_0, KPD_COL_1, KPD_COL_2 };
	/* array for keypad rows with specific row number */
	static uint8 kpdRowArr[ROW_NUM] = { KPD_ROW_0, KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
    21ca:	1a 82       	std	Y+2, r1	; 0x02
    21cc:	5e c0       	rjmp	.+188    	; 0x228a <KPD_GetPressedKey+0xd2>
		/* activate current column to check it */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_LOW);
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	fc 01       	movw	r30, r24
    21d6:	e9 51       	subi	r30, 0x19	; 25
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	90 81       	ld	r25, Z
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	69 2f       	mov	r22, r25
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
		for (rowCounter = 0; rowCounter < ROW_NUM; ++rowCounter) {
    21e6:	19 82       	std	Y+1, r1	; 0x01
    21e8:	3d c0       	rjmp	.+122    	; 0x2264 <KPD_GetPressedKey+0xac>
			/* read the value of the current row */
			GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter], &pinState);
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	fc 01       	movw	r30, r24
    21f2:	ed 51       	subi	r30, 0x1D	; 29
    21f4:	fe 4f       	sbci	r31, 0xFE	; 254
    21f6:	90 81       	ld	r25, Z
    21f8:	9e 01       	movw	r18, r28
    21fa:	2c 5f       	subi	r18, 0xFC	; 252
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	69 2f       	mov	r22, r25
    2202:	a9 01       	movw	r20, r18
    2204:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
			/* if the value is 0 that mean the key is pressed */
			if (pinState == PIN_LOW) {
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	88 23       	and	r24, r24
    220c:	41 f5       	brne	.+80     	; 0x225e <KPD_GetPressedKey+0xa6>
				/* get the value of the key with column and row number of loop */
				pressedKey = kpdArr[rowCounter][colCounter];
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	48 2f       	mov	r20, r24
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	c9 01       	movw	r24, r18
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	82 0f       	add	r24, r18
    2222:	93 1f       	adc	r25, r19
    2224:	84 0f       	add	r24, r20
    2226:	95 1f       	adc	r25, r21
    2228:	fc 01       	movw	r30, r24
    222a:	e6 51       	subi	r30, 0x16	; 22
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	80 81       	ld	r24, Z
    2230:	8b 83       	std	Y+3, r24	; 0x03
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <KPD_GetPressedKey+0x9a>
				/* wait until the key is released */
				while (pinState == PIN_LOW) {
					/* get the same value until the key is released */
					GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter],
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	fc 01       	movw	r30, r24
    223c:	ed 51       	subi	r30, 0x1D	; 29
    223e:	fe 4f       	sbci	r31, 0xFE	; 254
    2240:	90 81       	ld	r25, Z
    2242:	9e 01       	movw	r18, r28
    2244:	2c 5f       	subi	r18, 0xFC	; 252
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	69 2f       	mov	r22, r25
    224c:	a9 01       	movw	r20, r18
    224e:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
			/* if the value is 0 that mean the key is pressed */
			if (pinState == PIN_LOW) {
				/* get the value of the key with column and row number of loop */
				pressedKey = kpdArr[rowCounter][colCounter];
				/* wait until the key is released */
				while (pinState == PIN_LOW) {
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	88 23       	and	r24, r24
    2256:	71 f3       	breq	.-36     	; 0x2234 <KPD_GetPressedKey+0x7c>
					/* get the same value until the key is released */
					GPIO_GetPinValue(KPD_ROW_PORT, kpdRowArr[rowCounter],
							&pinState);
				}
				/* return the value of pressed key in the keypad */
				return pressedKey;
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	1c c0       	rjmp	.+56     	; 0x2296 <KPD_GetPressedKey+0xde>
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
		/* activate current column to check it */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_LOW);
		for (rowCounter = 0; rowCounter < ROW_NUM; ++rowCounter) {
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	8f 5f       	subi	r24, 0xFF	; 255
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	84 30       	cpi	r24, 0x04	; 4
    2268:	08 f4       	brcc	.+2      	; 0x226c <KPD_GetPressedKey+0xb4>
    226a:	bf cf       	rjmp	.-130    	; 0x21ea <KPD_GetPressedKey+0x32>
				/* return the value of pressed key in the keypad */
				return pressedKey;
			}
		}
		/* deactivate current column to check the next column in the next loop */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_HIGH);
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	e9 51       	subi	r30, 0x19	; 25
    2276:	fe 4f       	sbci	r31, 0xFE	; 254
    2278:	90 81       	ld	r25, Z
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	69 2f       	mov	r22, r25
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
	static uint8 kpdColArr[COL_NUM] = { KPD_COL_0, KPD_COL_1, KPD_COL_2 };
	/* array for keypad rows with specific row number */
	static uint8 kpdRowArr[ROW_NUM] = { KPD_ROW_0, KPD_ROW_1, KPD_ROW_2,
	KPD_ROW_3 };
	/* start loops to check the pins state */
	for (colCounter = 0; colCounter < COL_NUM; ++colCounter) {
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	08 f4       	brcc	.+2      	; 0x2292 <KPD_GetPressedKey+0xda>
    2290:	9e cf       	rjmp	.-196    	; 0x21ce <KPD_GetPressedKey+0x16>
		}
		/* deactivate current column to check the next column in the next loop */
		GPIO_SetPinValue(KPD_COL_PORT, kpdColArr[colCounter], PIN_HIGH);
	}
	/* return the value 0xFF which mean that no key is pressed */
	return pressedKey;
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <KPD_Init>:

void KPD_Init(void) {
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	/* set the PORTD output for the columns of KEYPAD */
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_0, OUTPUT);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_1, OUTPUT);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	63 e0       	ldi	r22, 0x03	; 3
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_COL_PORT, KPD_COL_2, OUTPUT);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	/* set the PORTB output for the rows of KEYPAD */
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_0, INPUT);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	64 e0       	ldi	r22, 0x04	; 4
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_1, INPUT);
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	65 e0       	ldi	r22, 0x05	; 5
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_2, INPUT);
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	66 e0       	ldi	r22, 0x06	; 6
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	GPIO_SetPinDirection(KPD_ROW_PORT, KPD_ROW_3, INPUT);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	67 e0       	ldi	r22, 0x07	; 7
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	/* set all pins of KEYPAD columns high */
	GPIO_SetPortValue(KPD_COL_PORT, 0x3C);
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	6c e3       	ldi	r22, 0x3C	; 60
    22fa:	0e 94 01 0b 	call	0x1602	; 0x1602 <GPIO_SetPortValue>
	/* set all pins of KEYPAD rows with internal pull-up resistor */
	GPIO_SetPortValue(KPD_ROW_PORT, 0xF0);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	60 ef       	ldi	r22, 0xF0	; 240
    2302:	0e 94 01 0b 	call	0x1602	; 0x1602 <GPIO_SetPortValue>
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <GAS_Init>:
#include "../../MCAL/External Interrupt/EXT_Private.h"
#include "../../MCAL/External Interrupt/EXT_Config.h"
#include "../../MCAL/Global Interrupt/GIE_Config.h"
#include "Gas.h"

void GAS_Init(void) {
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	// input pin
	GPIO_SetPinDirection(GAS_PORT, GAS_PIN, INPUT);
    2314:	83 e0       	ldi	r24, 0x03	; 3
    2316:	66 e0       	ldi	r22, 0x06	; 6
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <GAS_Motion>:

void GAS_Motion(uint8 *Gas) {
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <GAS_Motion+0x6>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	9b 83       	std	Y+3, r25	; 0x03
    2332:	8a 83       	std	Y+2, r24	; 0x02
	//check if pin == 1 or  = 0
	uint8 L_Gas = *Gas;
    2334:	ea 81       	ldd	r30, Y+2	; 0x02
    2336:	fb 81       	ldd	r31, Y+3	; 0x03
    2338:	80 81       	ld	r24, Z
    233a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_GetPinValue(GAS_PORT, GAS_PIN, &L_Gas);
    233c:	83 e0       	ldi	r24, 0x03	; 3
    233e:	66 e0       	ldi	r22, 0x06	; 6
    2340:	9e 01       	movw	r18, r28
    2342:	2f 5f       	subi	r18, 0xFF	; 255
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	a9 01       	movw	r20, r18
    2348:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
	if (L_Gas == 1) {
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	29 f4       	brne	.+10     	; 0x235c <GAS_Motion+0x38>
		*Gas = 1;
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	80 83       	st	Z, r24
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <GAS_Motion+0x3e>
	} else {
		*Gas = 0;
    235c:	ea 81       	ldd	r30, Y+2	; 0x02
    235e:	fb 81       	ldd	r31, Y+3	; 0x03
    2360:	10 82       	st	Z, r1
	}
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <FIRE_Init>:
#include "../../MCAL/External Interrupt/EXT_Private.h"
#include "../../MCAL/External Interrupt/EXT_Config.h"
#include "../../MCAL/Global Interrupt/GIE_Config.h"
#include "Fire.h"

void FIRE_Init(void) {
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	//input pin
	GPIO_SetPinDirection(FIRE_PORT, FIRE_PIN, INPUT);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	65 e0       	ldi	r22, 0x05	; 5
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
}
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <FIRE_Motion>:

void FIRE_Motion(uint8 *Status) {
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <FIRE_Motion+0x6>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	9b 83       	std	Y+3, r25	; 0x03
    2394:	8a 83       	std	Y+2, r24	; 0x02
	//check if pin == 1 or  = 0
	uint8 L_Status = *Status;
    2396:	ea 81       	ldd	r30, Y+2	; 0x02
    2398:	fb 81       	ldd	r31, Y+3	; 0x03
    239a:	80 81       	ld	r24, Z
    239c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_GetPinValue(FIRE_PORT, FIRE_PIN, &L_Status);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	65 e0       	ldi	r22, 0x05	; 5
    23a2:	9e 01       	movw	r18, r28
    23a4:	2f 5f       	subi	r18, 0xFF	; 255
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	a9 01       	movw	r20, r18
    23aa:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
	if (L_Status == 1) {
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	29 f4       	brne	.+10     	; 0x23be <FIRE_Motion+0x38>
		*Status = 1;
    23b4:	ea 81       	ldd	r30, Y+2	; 0x02
    23b6:	fb 81       	ldd	r31, Y+3	; 0x03
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 83       	st	Z, r24
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <FIRE_Motion+0x3e>
	} else {
		*Status = 0;
    23be:	ea 81       	ldd	r30, Y+2	; 0x02
    23c0:	fb 81       	ldd	r31, Y+3	; 0x03
    23c2:	10 82       	st	Z, r1
	}
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <FingerPrint_Init>:
#include "../../MCAL/ADC/ADC_Private.h"
#include "../../MCAL/ADC/ADC_Config.h"
#include "FingerPrint.h"
#include <util/delay.h>

void FingerPrint_Init(void) {
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	//input pin
	//CLEAR_BIT(FingerPrint_DDR,FingerPrint_PIN_NUM);
	GPIO_SetPinDirection(FingerPrint_PORT, FingerPrint_PIN, INPUT);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	67 e0       	ldi	r22, 0x07	; 7
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
}
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <FingerPrint_status>:

void FingerPrint_status(uint8 *status) {
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <FingerPrint_status+0x6>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	8a 83       	std	Y+2, r24	; 0x02
	//check if pin == 1 or  = 0
	uint8 L_stat = *status;
    23f8:	ea 81       	ldd	r30, Y+2	; 0x02
    23fa:	fb 81       	ldd	r31, Y+3	; 0x03
    23fc:	80 81       	ld	r24, Z
    23fe:	89 83       	std	Y+1, r24	; 0x01
	GPIO_GetPinValue(FingerPrint_PORT, FingerPrint_PIN, &L_stat);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	67 e0       	ldi	r22, 0x07	; 7
    2404:	9e 01       	movw	r18, r28
    2406:	2f 5f       	subi	r18, 0xFF	; 255
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
    240a:	a9 01       	movw	r20, r18
    240c:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
	if (L_stat) {
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	88 23       	and	r24, r24
    2414:	29 f0       	breq	.+10     	; 0x2420 <FingerPrint_status+0x38>
		*status = 1;
    2416:	ea 81       	ldd	r30, Y+2	; 0x02
    2418:	fb 81       	ldd	r31, Y+3	; 0x03
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	80 83       	st	Z, r24
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <FingerPrint_status+0x3e>
	} else {
		*status = 0;
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	10 82       	st	Z, r1
	}
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <BUZZER_init>:
 *                              Functions Definitions                          *
 *******************************************************************************/

            /*---------- A function to initialize the Buzzer ---------*/
void BUZZER_init (void)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	 GPIO_SetPinDirection(BUZZER_PORT,BUZZER_PIN,OUTPUT);		/*Make the LED pin output pin*/
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 06 08 	call	0x100c	; 0x100c <GPIO_SetPinDirection>
	 GPIO_SetPinValue(BUZZER_PORT,BUZZER_PIN,PIN_LOW);			/*Turn off the Buzzer Initially*/
    2444:	83 e0       	ldi	r24, 0x03	; 3
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
};
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <BUZZER_ON>:

			/*---------- A function to Turn On the Buzzer ---------*/
void BUZZER_ON(void)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinValue(BUZZER_PORT,BUZZER_PIN,PIN_HIGH);			/* Turn On the Buzzer */
    245c:	83 e0       	ldi	r24, 0x03	; 3
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
};
    2466:	cf 91       	pop	r28
    2468:	df 91       	pop	r29
    246a:	08 95       	ret

0000246c <BUZZER_OFF>:

		   /*---------- A function to Turn ON the Buzzer ---------*/
void BUZZER_OFF(void)
{
    246c:	df 93       	push	r29
    246e:	cf 93       	push	r28
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinValue(BUZZER_PORT,BUZZER_PIN,PIN_LOW);			/* Turn OFF the Buzzer */
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
};
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <main>:
#include "HAL/Gas/Gas.h"
#include "Comman_Macros.h"
#include "STD_TYPES.h"
#include <util/delay.h>

int main(void) {
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	cb 54       	subi	r28, 0x4B	; 75
    248e:	d0 40       	sbci	r29, 0x00	; 0
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
	uint8 temp, check_password = 0, password_try = 3;
    249a:	fe 01       	movw	r30, r28
    249c:	ef 5b       	subi	r30, 0xBF	; 191
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	10 82       	st	Z, r1
    24a2:	83 e0       	ldi	r24, 0x03	; 3
    24a4:	fe 01       	movw	r30, r28
    24a6:	e0 5c       	subi	r30, 0xC0	; 192
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 83       	st	Z, r24
	uint8 user_password[4];
	LCD_Init();
    24ac:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_Init>
	KPD_Init();
    24b0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <KPD_Init>
	ADC_Init();
    24b4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <ADC_Init>
	Seven_Seg_Init();
    24b8:	0e 94 47 0c 	call	0x188e	; 0x188e <Seven_Seg_Init>
	MOTOR_Init();
    24bc:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <MOTOR_Init>
	BUZZER_init();
    24c0:	0e 94 19 12 	call	0x2432	; 0x2432 <BUZZER_init>
	PIR_Init();
    24c4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <PIR_Init>
	FIRE_Init();
    24c8:	0e 94 b7 11 	call	0x236e	; 0x236e <FIRE_Init>
	GAS_Init();
    24cc:	0e 94 86 11 	call	0x230c	; 0x230c <GAS_Init>
    24d0:	6c c0       	rjmp	.+216    	; 0x25aa <main+0x126>
	while (check_password == 0 && password_try != 0) {
		uint8 password_index = 0;
    24d2:	1f ae       	std	Y+63, r1	; 0x3f
		if (password_try == 3) {
    24d4:	fe 01       	movw	r30, r28
    24d6:	e0 5c       	subi	r30, 0xC0	; 192
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	83 30       	cpi	r24, 0x03	; 3
    24de:	49 f4       	brne	.+18     	; 0x24f2 <main+0x6e>
			LCD_DisplayString("Enter Password: ");
    24e0:	80 e6       	ldi	r24, 0x60	; 96
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
			LCD_MoveCursor(1, 0);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
    24f0:	30 c0       	rjmp	.+96     	; 0x2552 <main+0xce>
		} else {
			LCD_DisplayString("Try Again: ");
    24f2:	81 e7       	ldi	r24, 0x71	; 113
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
			LCD_MoveCursor(1, 0);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
    2502:	27 c0       	rjmp	.+78     	; 0x2552 <main+0xce>
		}
		while (password_index < 4) {
			temp = KPD_GetPressedKey();
    2504:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <KPD_GetPressedKey>
    2508:	fe 01       	movw	r30, r28
    250a:	ee 5b       	subi	r30, 0xBE	; 190
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 83       	st	Z, r24
    2510:	06 c0       	rjmp	.+12     	; 0x251e <main+0x9a>
			while (temp == KPD_NO_PRESSED_KEY) {
				temp = KPD_GetPressedKey();
    2512:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <KPD_GetPressedKey>
    2516:	fe 01       	movw	r30, r28
    2518:	ee 5b       	subi	r30, 0xBE	; 190
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 83       	st	Z, r24
			LCD_DisplayString("Try Again: ");
			LCD_MoveCursor(1, 0);
		}
		while (password_index < 4) {
			temp = KPD_GetPressedKey();
			while (temp == KPD_NO_PRESSED_KEY) {
    251e:	fe 01       	movw	r30, r28
    2520:	ee 5b       	subi	r30, 0xBE	; 190
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	8f 3f       	cpi	r24, 0xFF	; 255
    2528:	a1 f3       	breq	.-24     	; 0x2512 <main+0x8e>
				temp = KPD_GetPressedKey();
			}
			LCD_SendData('*');
    252a:	8a e2       	ldi	r24, 0x2A	; 42
    252c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_SendData>
			user_password[password_index] = temp;
    2530:	8f ad       	ldd	r24, Y+63	; 0x3f
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	ce 01       	movw	r24, r28
    2538:	8d 5b       	subi	r24, 0xBD	; 189
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	dc 01       	movw	r26, r24
    253e:	a2 0f       	add	r26, r18
    2540:	b3 1f       	adc	r27, r19
    2542:	fe 01       	movw	r30, r28
    2544:	ee 5b       	subi	r30, 0xBE	; 190
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	8c 93       	st	X, r24
			password_index++;
    254c:	8f ad       	ldd	r24, Y+63	; 0x3f
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	8f af       	std	Y+63, r24	; 0x3f
			LCD_MoveCursor(1, 0);
		} else {
			LCD_DisplayString("Try Again: ");
			LCD_MoveCursor(1, 0);
		}
		while (password_index < 4) {
    2552:	8f ad       	ldd	r24, Y+63	; 0x3f
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	b0 f2       	brcs	.-84     	; 0x2504 <main+0x80>
			}
			LCD_SendData('*');
			user_password[password_index] = temp;
			password_index++;
		}
		if (user_password[0] == '1' && user_password[1] == '2'
    2558:	fe 01       	movw	r30, r28
    255a:	ed 5b       	subi	r30, 0xBD	; 189
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 81       	ld	r24, Z
    2560:	81 33       	cpi	r24, 0x31	; 49
    2562:	c1 f4       	brne	.+48     	; 0x2594 <main+0x110>
    2564:	fe 01       	movw	r30, r28
    2566:	ed 5b       	subi	r30, 0xBD	; 189
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	81 81       	ldd	r24, Z+1	; 0x01
    256c:	82 33       	cpi	r24, 0x32	; 50
    256e:	91 f4       	brne	.+36     	; 0x2594 <main+0x110>
    2570:	fe 01       	movw	r30, r28
    2572:	ed 5b       	subi	r30, 0xBD	; 189
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	83 33       	cpi	r24, 0x33	; 51
    257a:	61 f4       	brne	.+24     	; 0x2594 <main+0x110>
    257c:	fe 01       	movw	r30, r28
    257e:	ed 5b       	subi	r30, 0xBD	; 189
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	83 81       	ldd	r24, Z+3	; 0x03
    2584:	84 33       	cpi	r24, 0x34	; 52
    2586:	31 f4       	brne	.+12     	; 0x2594 <main+0x110>
				&& user_password[2] == '3' && user_password[3] == '4') {
			check_password = 1;
    2588:	fe 01       	movw	r30, r28
    258a:	ef 5b       	subi	r30, 0xBF	; 191
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	80 83       	st	Z, r24
    2592:	18 c0       	rjmp	.+48     	; 0x25c4 <main+0x140>
			break;
		} else {
			LCD_ClearScreen();
    2594:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
			password_try--;
    2598:	fe 01       	movw	r30, r28
    259a:	e0 5c       	subi	r30, 0xC0	; 192
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	81 50       	subi	r24, 0x01	; 1
    25a2:	fe 01       	movw	r30, r28
    25a4:	e0 5c       	subi	r30, 0xC0	; 192
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 83       	st	Z, r24
	MOTOR_Init();
	BUZZER_init();
	PIR_Init();
	FIRE_Init();
	GAS_Init();
	while (check_password == 0 && password_try != 0) {
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5b       	subi	r30, 0xBF	; 191
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	88 23       	and	r24, r24
    25b4:	39 f4       	brne	.+14     	; 0x25c4 <main+0x140>
    25b6:	fe 01       	movw	r30, r28
    25b8:	e0 5c       	subi	r30, 0xC0	; 192
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	88 23       	and	r24, r24
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <main+0x140>
    25c2:	87 cf       	rjmp	.-242    	; 0x24d2 <main+0x4e>
		} else {
			LCD_ClearScreen();
			password_try--;
		}
	}
	if (check_password) {
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 5b       	subi	r30, 0xBF	; 191
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <main+0x14e>
    25d0:	cb c2       	rjmp	.+1430   	; 0x2b68 <main+0x6e4>
		uint8 analogTemp, temproray1, speed, analogLDR, temproray2;
		uint8 flagPIR = 0, flagFIRE = 0, flagGAS = 0;
    25d2:	1b ae       	std	Y+59, r1	; 0x3b
    25d4:	1a ae       	std	Y+58, r1	; 0x3a
    25d6:	19 ae       	std	Y+57, r1	; 0x39
		uint8 PIR, GAS, FIRE;
		LCD_ClearScreen();
    25d8:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
		LCD_DisplayString("Welcome :)");
    25dc:	8d e7       	ldi	r24, 0x7D	; 125
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a8 e4       	ldi	r26, 0x48	; 72
    25ea:	b2 e4       	ldi	r27, 0x42	; 66
    25ec:	8d ab       	std	Y+53, r24	; 0x35
    25ee:	9e ab       	std	Y+54, r25	; 0x36
    25f0:	af ab       	std	Y+55, r26	; 0x37
    25f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f4:	6d a9       	ldd	r22, Y+53	; 0x35
    25f6:	7e a9       	ldd	r23, Y+54	; 0x36
    25f8:	8f a9       	ldd	r24, Y+55	; 0x37
    25fa:	98 ad       	ldd	r25, Y+56	; 0x38
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4a e7       	ldi	r20, 0x7A	; 122
    2602:	55 e4       	ldi	r21, 0x45	; 69
    2604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	89 ab       	std	Y+49, r24	; 0x31
    260e:	9a ab       	std	Y+50, r25	; 0x32
    2610:	ab ab       	std	Y+51, r26	; 0x33
    2612:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2614:	69 a9       	ldd	r22, Y+49	; 0x31
    2616:	7a a9       	ldd	r23, Y+50	; 0x32
    2618:	8b a9       	ldd	r24, Y+51	; 0x33
    261a:	9c a9       	ldd	r25, Y+52	; 0x34
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <main+0x1b2>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 ab       	std	Y+48, r25	; 0x30
    2632:	8f a7       	std	Y+47, r24	; 0x2f
    2634:	3f c0       	rjmp	.+126    	; 0x26b4 <main+0x230>
	else if (__tmp > 65535)
    2636:	69 a9       	ldd	r22, Y+49	; 0x31
    2638:	7a a9       	ldd	r23, Y+50	; 0x32
    263a:	8b a9       	ldd	r24, Y+51	; 0x33
    263c:	9c a9       	ldd	r25, Y+52	; 0x34
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	4c f5       	brge	.+82     	; 0x26a0 <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	6d a9       	ldd	r22, Y+53	; 0x35
    2650:	7e a9       	ldd	r23, Y+54	; 0x36
    2652:	8f a9       	ldd	r24, Y+55	; 0x37
    2654:	98 ad       	ldd	r25, Y+56	; 0x38
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	98 ab       	std	Y+48, r25	; 0x30
    2674:	8f a7       	std	Y+47, r24	; 0x2f
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <main+0x212>
    2678:	80 e9       	ldi	r24, 0x90	; 144
    267a:	91 e0       	ldi	r25, 0x01	; 1
    267c:	9e a7       	std	Y+46, r25	; 0x2e
    267e:	8d a7       	std	Y+45, r24	; 0x2d
    2680:	8d a5       	ldd	r24, Y+45	; 0x2d
    2682:	9e a5       	ldd	r25, Y+46	; 0x2e
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <main+0x200>
    2688:	9e a7       	std	Y+46, r25	; 0x2e
    268a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268c:	8f a5       	ldd	r24, Y+47	; 0x2f
    268e:	98 a9       	ldd	r25, Y+48	; 0x30
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	98 ab       	std	Y+48, r25	; 0x30
    2694:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	8f a5       	ldd	r24, Y+47	; 0x2f
    2698:	98 a9       	ldd	r25, Y+48	; 0x30
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f7       	brne	.-38     	; 0x2678 <main+0x1f4>
    269e:	14 c0       	rjmp	.+40     	; 0x26c8 <main+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	69 a9       	ldd	r22, Y+49	; 0x31
    26a2:	7a a9       	ldd	r23, Y+50	; 0x32
    26a4:	8b a9       	ldd	r24, Y+51	; 0x33
    26a6:	9c a9       	ldd	r25, Y+52	; 0x34
    26a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	98 ab       	std	Y+48, r25	; 0x30
    26b2:	8f a7       	std	Y+47, r24	; 0x2f
    26b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b6:	98 a9       	ldd	r25, Y+48	; 0x30
    26b8:	9c a7       	std	Y+44, r25	; 0x2c
    26ba:	8b a7       	std	Y+43, r24	; 0x2b
    26bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26be:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <main+0x23c>
    26c4:	9c a7       	std	Y+44, r25	; 0x2c
    26c6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		LCD_ClearScreen();
    26c8:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
		while (1) {
			GPIO_GetPinValue(PORT_D, PIN5, &FIRE);
    26cc:	9e 01       	movw	r18, r28
    26ce:	25 5b       	subi	r18, 0xB5	; 181
    26d0:	3f 4f       	sbci	r19, 0xFF	; 255
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	65 e0       	ldi	r22, 0x05	; 5
    26d6:	a9 01       	movw	r20, r18
    26d8:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
			if (FIRE) {
    26dc:	fe 01       	movw	r30, r28
    26de:	e5 5b       	subi	r30, 0xB5	; 181
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	88 23       	and	r24, r24
    26e6:	19 f0       	breq	.+6      	; 0x26ee <main+0x26a>
				flagFIRE = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	8a af       	std	Y+58, r24	; 0x3a
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <main+0x26c>
			} else {
				flagFIRE = 0;
    26ee:	1a ae       	std	Y+58, r1	; 0x3a
			}
			GPIO_GetPinValue(PORT_D, PIN6, &GAS);
    26f0:	9e 01       	movw	r18, r28
    26f2:	26 5b       	subi	r18, 0xB6	; 182
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	83 e0       	ldi	r24, 0x03	; 3
    26f8:	66 e0       	ldi	r22, 0x06	; 6
    26fa:	a9 01       	movw	r20, r18
    26fc:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
			if (GAS) {
    2700:	fe 01       	movw	r30, r28
    2702:	e6 5b       	subi	r30, 0xB6	; 182
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	19 f0       	breq	.+6      	; 0x2712 <main+0x28e>
				flagGAS = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	89 af       	std	Y+57, r24	; 0x39
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <main+0x290>
			} else {
				flagGAS = 0;
    2712:	19 ae       	std	Y+57, r1	; 0x39
			}
			GPIO_GetPinValue(PORT_D, PIN7, &PIR);
    2714:	9e 01       	movw	r18, r28
    2716:	27 5b       	subi	r18, 0xB7	; 183
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	67 e0       	ldi	r22, 0x07	; 7
    271e:	a9 01       	movw	r20, r18
    2720:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
			if (PIR) {
    2724:	fe 01       	movw	r30, r28
    2726:	e7 5b       	subi	r30, 0xB7	; 183
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	88 23       	and	r24, r24
    272e:	19 f0       	breq	.+6      	; 0x2736 <main+0x2b2>
				flagPIR = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	8b af       	std	Y+59, r24	; 0x3b
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <main+0x2b4>
			} else {
				flagPIR = 0;
    2736:	1b ae       	std	Y+59, r1	; 0x3b
			}
			if (flagPIR) {
    2738:	8b ad       	ldd	r24, Y+59	; 0x3b
    273a:	88 23       	and	r24, r24
    273c:	31 f0       	breq	.+12     	; 0x274a <main+0x2c6>
				GPIO_SetPinValue(PORT_A, PIN2, PIN_HIGH);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    2748:	05 c0       	rjmp	.+10     	; 0x2754 <main+0x2d0>
			} else {
				GPIO_SetPinValue(PORT_A, PIN2, PIN_LOW);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
			}
			if (flagFIRE || flagGAS) {
    2754:	8a ad       	ldd	r24, Y+58	; 0x3a
    2756:	88 23       	and	r24, r24
    2758:	09 f0       	breq	.+2      	; 0x275c <main+0x2d8>
    275a:	9b c0       	rjmp	.+310    	; 0x2892 <main+0x40e>
    275c:	89 ad       	ldd	r24, Y+57	; 0x39
    275e:	88 23       	and	r24, r24
    2760:	09 f4       	brne	.+2      	; 0x2764 <main+0x2e0>
    2762:	71 c1       	rjmp	.+738    	; 0x2a46 <main+0x5c2>
    2764:	96 c0       	rjmp	.+300    	; 0x2892 <main+0x40e>
				while (flagFIRE) {
					LCD_ClearScreen();
    2766:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
					LCD_DisplayString("*FLAME Detected*");
    276a:	88 e8       	ldi	r24, 0x88	; 136
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
					LCD_MoveCursor(1, 0);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
					LCD_DisplayString("****************");
    277a:	89 e9       	ldi	r24, 0x99	; 153
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
					BUZZER_ON();
    2782:	0e 94 2a 12 	call	0x2454	; 0x2454 <BUZZER_ON>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a8 ec       	ldi	r26, 0xC8	; 200
    278c:	b1 e4       	ldi	r27, 0x41	; 65
    278e:	8f a3       	std	Y+39, r24	; 0x27
    2790:	98 a7       	std	Y+40, r25	; 0x28
    2792:	a9 a7       	std	Y+41, r26	; 0x29
    2794:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	6f a1       	ldd	r22, Y+39	; 0x27
    2798:	78 a5       	ldd	r23, Y+40	; 0x28
    279a:	89 a5       	ldd	r24, Y+41	; 0x29
    279c:	9a a5       	ldd	r25, Y+42	; 0x2a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a e7       	ldi	r20, 0x7A	; 122
    27a4:	55 e4       	ldi	r21, 0x45	; 69
    27a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8b a3       	std	Y+35, r24	; 0x23
    27b0:	9c a3       	std	Y+36, r25	; 0x24
    27b2:	ad a3       	std	Y+37, r26	; 0x25
    27b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b6:	6b a1       	ldd	r22, Y+35	; 0x23
    27b8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ba:	8d a1       	ldd	r24, Y+37	; 0x25
    27bc:	9e a1       	ldd	r25, Y+38	; 0x26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	2c f4       	brge	.+10     	; 0x27d8 <main+0x354>
		__ticks = 1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9a a3       	std	Y+34, r25	; 0x22
    27d4:	89 a3       	std	Y+33, r24	; 0x21
    27d6:	3f c0       	rjmp	.+126    	; 0x2856 <main+0x3d2>
	else if (__tmp > 65535)
    27d8:	6b a1       	ldd	r22, Y+35	; 0x23
    27da:	7c a1       	ldd	r23, Y+36	; 0x24
    27dc:	8d a1       	ldd	r24, Y+37	; 0x25
    27de:	9e a1       	ldd	r25, Y+38	; 0x26
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	4c f5       	brge	.+82     	; 0x2842 <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	6f a1       	ldd	r22, Y+39	; 0x27
    27f2:	78 a5       	ldd	r23, Y+40	; 0x28
    27f4:	89 a5       	ldd	r24, Y+41	; 0x29
    27f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9a a3       	std	Y+34, r25	; 0x22
    2816:	89 a3       	std	Y+33, r24	; 0x21
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <main+0x3b4>
    281a:	80 e9       	ldi	r24, 0x90	; 144
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	98 a3       	std	Y+32, r25	; 0x20
    2820:	8f 8f       	std	Y+31, r24	; 0x1f
    2822:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2824:	98 a1       	ldd	r25, Y+32	; 0x20
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <main+0x3a2>
    282a:	98 a3       	std	Y+32, r25	; 0x20
    282c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	89 a1       	ldd	r24, Y+33	; 0x21
    2830:	9a a1       	ldd	r25, Y+34	; 0x22
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9a a3       	std	Y+34, r25	; 0x22
    2836:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2838:	89 a1       	ldd	r24, Y+33	; 0x21
    283a:	9a a1       	ldd	r25, Y+34	; 0x22
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f7       	brne	.-38     	; 0x281a <main+0x396>
    2840:	14 c0       	rjmp	.+40     	; 0x286a <main+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	6b a1       	ldd	r22, Y+35	; 0x23
    2844:	7c a1       	ldd	r23, Y+36	; 0x24
    2846:	8d a1       	ldd	r24, Y+37	; 0x25
    2848:	9e a1       	ldd	r25, Y+38	; 0x26
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9a a3       	std	Y+34, r25	; 0x22
    2854:	89 a3       	std	Y+33, r24	; 0x21
    2856:	89 a1       	ldd	r24, Y+33	; 0x21
    2858:	9a a1       	ldd	r25, Y+34	; 0x22
    285a:	9e 8f       	std	Y+30, r25	; 0x1e
    285c:	8d 8f       	std	Y+29, r24	; 0x1d
    285e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2860:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <main+0x3de>
    2866:	9e 8f       	std	Y+30, r25	; 0x1e
    2868:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(25);
					BUZZER_OFF();
    286a:	0e 94 36 12 	call	0x246c	; 0x246c <BUZZER_OFF>
					GPIO_GetPinValue(PORT_D, PIN5, &FIRE);
    286e:	9e 01       	movw	r18, r28
    2870:	25 5b       	subi	r18, 0xB5	; 181
    2872:	3f 4f       	sbci	r19, 0xFF	; 255
    2874:	83 e0       	ldi	r24, 0x03	; 3
    2876:	65 e0       	ldi	r22, 0x05	; 5
    2878:	a9 01       	movw	r20, r18
    287a:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
					if (FIRE) {
    287e:	fe 01       	movw	r30, r28
    2880:	e5 5b       	subi	r30, 0xB5	; 181
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	88 23       	and	r24, r24
    2888:	19 f0       	breq	.+6      	; 0x2890 <main+0x40c>
						flagFIRE = 1;
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	8a af       	std	Y+58, r24	; 0x3a
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <main+0x40e>
					} else {
						flagFIRE = 0;
    2890:	1a ae       	std	Y+58, r1	; 0x3a
				GPIO_SetPinValue(PORT_A, PIN2, PIN_HIGH);
			} else {
				GPIO_SetPinValue(PORT_A, PIN2, PIN_LOW);
			}
			if (flagFIRE || flagGAS) {
				while (flagFIRE) {
    2892:	8a ad       	ldd	r24, Y+58	; 0x3a
    2894:	88 23       	and	r24, r24
    2896:	09 f0       	breq	.+2      	; 0x289a <main+0x416>
    2898:	66 cf       	rjmp	.-308    	; 0x2766 <main+0x2e2>
    289a:	a8 c0       	rjmp	.+336    	; 0x29ec <main+0x568>
					} else {
						flagFIRE = 0;
					}
				}
				while (flagGAS) {
					LCD_ClearScreen();
    289c:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
					LCD_DisplayString("**GAS Detected**");
    28a0:	8a ea       	ldi	r24, 0xAA	; 170
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
					LCD_MoveCursor(1, 0);
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
					LCD_DisplayString("****************");
    28b0:	89 e9       	ldi	r24, 0x99	; 153
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
					BUZZER_ON();
    28b8:	0e 94 2a 12 	call	0x2454	; 0x2454 <BUZZER_ON>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a8 ec       	ldi	r26, 0xC8	; 200
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	89 8f       	std	Y+25, r24	; 0x19
    28c6:	9a 8f       	std	Y+26, r25	; 0x1a
    28c8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	69 8d       	ldd	r22, Y+25	; 0x19
    28ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	55 e4       	ldi	r21, 0x45	; 69
    28dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8d 8b       	std	Y+21, r24	; 0x15
    28e6:	9e 8b       	std	Y+22, r25	; 0x16
    28e8:	af 8b       	std	Y+23, r26	; 0x17
    28ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <main+0x48a>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 8b       	std	Y+20, r25	; 0x14
    290a:	8b 8b       	std	Y+19, r24	; 0x13
    290c:	3f c0       	rjmp	.+126    	; 0x298c <main+0x508>
	else if (__tmp > 65535)
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <main+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	69 8d       	ldd	r22, Y+25	; 0x19
    2928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	0f c0       	rjmp	.+30     	; 0x296e <main+0x4ea>
    2950:	80 e9       	ldi	r24, 0x90	; 144
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	9a 8b       	std	Y+18, r25	; 0x12
    2956:	89 8b       	std	Y+17, r24	; 0x11
    2958:	89 89       	ldd	r24, Y+17	; 0x11
    295a:	9a 89       	ldd	r25, Y+18	; 0x12
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <main+0x4d8>
    2960:	9a 8b       	std	Y+18, r25	; 0x12
    2962:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9c 8b       	std	Y+20, r25	; 0x14
    296c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <main+0x4cc>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <main+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6d 89       	ldd	r22, Y+21	; 0x15
    297a:	7e 89       	ldd	r23, Y+22	; 0x16
    297c:	8f 89       	ldd	r24, Y+23	; 0x17
    297e:	98 8d       	ldd	r25, Y+24	; 0x18
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9c 8b       	std	Y+20, r25	; 0x14
    298a:	8b 8b       	std	Y+19, r24	; 0x13
    298c:	8b 89       	ldd	r24, Y+19	; 0x13
    298e:	9c 89       	ldd	r25, Y+20	; 0x14
    2990:	98 8b       	std	Y+16, r25	; 0x10
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	8f 85       	ldd	r24, Y+15	; 0x0f
    2996:	98 89       	ldd	r25, Y+16	; 0x10
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <main+0x514>
    299c:	98 8b       	std	Y+16, r25	; 0x10
    299e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(25);
					BUZZER_OFF();
    29a0:	0e 94 36 12 	call	0x246c	; 0x246c <BUZZER_OFF>
					GPIO_GetPinValue(PORT_D, PIN6, &GAS);
    29a4:	9e 01       	movw	r18, r28
    29a6:	26 5b       	subi	r18, 0xB6	; 182
    29a8:	3f 4f       	sbci	r19, 0xFF	; 255
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	66 e0       	ldi	r22, 0x06	; 6
    29ae:	a9 01       	movw	r20, r18
    29b0:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
					if (GAS) {
    29b4:	fe 01       	movw	r30, r28
    29b6:	e6 5b       	subi	r30, 0xB6	; 182
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	88 23       	and	r24, r24
    29be:	19 f0       	breq	.+6      	; 0x29c6 <main+0x542>
						flagGAS = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	89 af       	std	Y+57, r24	; 0x39
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <main+0x544>
					} else {
						flagGAS = 0;
    29c6:	19 ae       	std	Y+57, r1	; 0x39
					}
					GPIO_GetPinValue(PORT_D, PIN5, &FIRE);
    29c8:	9e 01       	movw	r18, r28
    29ca:	25 5b       	subi	r18, 0xB5	; 181
    29cc:	3f 4f       	sbci	r19, 0xFF	; 255
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	65 e0       	ldi	r22, 0x05	; 5
    29d2:	a9 01       	movw	r20, r18
    29d4:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_GetPinValue>
					if (FIRE) {
    29d8:	fe 01       	movw	r30, r28
    29da:	e5 5b       	subi	r30, 0xB5	; 181
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	88 23       	and	r24, r24
    29e2:	19 f0       	breq	.+6      	; 0x29ea <main+0x566>
						flagFIRE = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	8a af       	std	Y+58, r24	; 0x3a
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <main+0x570>
						break;
					} else {
						flagFIRE = 0;
    29ea:	1a ae       	std	Y+58, r1	; 0x3a
						flagFIRE = 1;
					} else {
						flagFIRE = 0;
					}
				}
				while (flagGAS) {
    29ec:	89 ad       	ldd	r24, Y+57	; 0x39
    29ee:	88 23       	and	r24, r24
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <main+0x570>
    29f2:	54 cf       	rjmp	.-344    	; 0x289c <main+0x418>
						break;
					} else {
						flagFIRE = 0;
					}
				}
				LCD_ClearScreen();
    29f4:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
				LCD_DisplayString("LDR: ");
    29f8:	8b eb       	ldi	r24, 0xBB	; 187
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
				LCD_NumberToString(analogLDR);
    2a00:	fe 01       	movw	r30, r28
    2a02:	e8 5b       	subi	r30, 0xB8	; 184
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_NumberToString>
				LCD_SendData('%');
    2a18:	85 e2       	ldi	r24, 0x25	; 37
    2a1a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_SendData>
				LCD_MoveCursor(1, 0);
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
				LCD_DisplayString("Temperature: ");
    2a26:	81 ec       	ldi	r24, 0xC1	; 193
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
				LCD_NumberToString(analogTemp);
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 5b       	subi	r30, 0xB9	; 185
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	88 2f       	mov	r24, r24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_NumberToString>
			}
			temproray1 = analogTemp;
    2a46:	fe 01       	movw	r30, r28
    2a48:	e9 5b       	subi	r30, 0xB9	; 185
    2a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8e af       	std	Y+62, r24	; 0x3e
			LM35_Read(&analogTemp);
    2a50:	ce 01       	movw	r24, r28
    2a52:	89 5b       	subi	r24, 0xB9	; 185
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LM35_Read>
			temproray2 = analogLDR;
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e8 5b       	subi	r30, 0xB8	; 184
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	8c af       	std	Y+60, r24	; 0x3c
			LDR_READ(&analogLDR);
    2a64:	ce 01       	movw	r24, r28
    2a66:	88 5b       	subi	r24, 0xB8	; 184
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <LDR_READ>
			if (temproray1 != analogTemp || temproray2 != analogLDR) {
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e9 5b       	subi	r30, 0xB9	; 185
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	90 81       	ld	r25, Z
    2a76:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a78:	89 17       	cp	r24, r25
    2a7a:	39 f4       	brne	.+14     	; 0x2a8a <main+0x606>
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e8 5b       	subi	r30, 0xB8	; 184
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	90 81       	ld	r25, Z
    2a84:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a86:	89 17       	cp	r24, r25
    2a88:	49 f1       	breq	.+82     	; 0x2adc <main+0x658>
				LCD_ClearScreen();
    2a8a:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_ClearScreen>
				LCD_DisplayString("Temperature: ");
    2a8e:	81 ec       	ldi	r24, 0xC1	; 193
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
				LCD_NumberToString(analogTemp);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e9 5b       	subi	r30, 0xB9	; 185
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	88 2f       	mov	r24, r24
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_NumberToString>
				LCD_MoveCursor(1, 0);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_MoveCursor>
				LCD_DisplayString("LDR: ");
    2ab6:	8b eb       	ldi	r24, 0xBB	; 187
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
				LCD_NumberToString(analogLDR);
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e8 5b       	subi	r30, 0xB8	; 184
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_NumberToString>
				LCD_SendData('%');
    2ad6:	85 e2       	ldi	r24, 0x25	; 37
    2ad8:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_SendData>
			}
			if (analogTemp < 25) {
    2adc:	fe 01       	movw	r30, r28
    2ade:	e9 5b       	subi	r30, 0xB9	; 185
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	89 31       	cpi	r24, 0x19	; 25
    2ae6:	40 f4       	brcc	.+16     	; 0x2af8 <main+0x674>
				speed = 0;
    2ae8:	1d ae       	std	Y+61, r1	; 0x3d
				Seven_Seg_Display(speed);
    2aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aec:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Seven_Seg_Display>
				MOTOR_Speed(speed);
    2af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MOTOR_Speed>
    2af6:	26 c0       	rjmp	.+76     	; 0x2b44 <main+0x6c0>
			} else if (analogTemp < 30) {
    2af8:	fe 01       	movw	r30, r28
    2afa:	e9 5b       	subi	r30, 0xB9	; 185
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	8e 31       	cpi	r24, 0x1E	; 30
    2b02:	48 f4       	brcc	.+18     	; 0x2b16 <main+0x692>
				speed = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	8d af       	std	Y+61, r24	; 0x3d
				Seven_Seg_Display(speed);
    2b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b0a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Seven_Seg_Display>
				MOTOR_Speed(speed);
    2b0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b10:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MOTOR_Speed>
    2b14:	17 c0       	rjmp	.+46     	; 0x2b44 <main+0x6c0>
			} else if (analogTemp < 35) {
    2b16:	fe 01       	movw	r30, r28
    2b18:	e9 5b       	subi	r30, 0xB9	; 185
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	83 32       	cpi	r24, 0x23	; 35
    2b20:	48 f4       	brcc	.+18     	; 0x2b34 <main+0x6b0>
				speed = 2;
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	8d af       	std	Y+61, r24	; 0x3d
				Seven_Seg_Display(speed);
    2b26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b28:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Seven_Seg_Display>
				MOTOR_Speed(speed);
    2b2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MOTOR_Speed>
    2b32:	08 c0       	rjmp	.+16     	; 0x2b44 <main+0x6c0>
			} else {
				speed = 3;
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	8d af       	std	Y+61, r24	; 0x3d
				Seven_Seg_Display(speed);
    2b38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Seven_Seg_Display>
				MOTOR_Speed(speed);
    2b3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b40:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MOTOR_Speed>
			}
			if (analogLDR <= 50) {
    2b44:	fe 01       	movw	r30, r28
    2b46:	e8 5b       	subi	r30, 0xB8	; 184
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	83 33       	cpi	r24, 0x33	; 51
    2b4e:	30 f4       	brcc	.+12     	; 0x2b5c <main+0x6d8>
				GPIO_SetPinValue(PORT_D, PIN1, PIN_HIGH);
    2b50:	83 e0       	ldi	r24, 0x03	; 3
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	41 e0       	ldi	r20, 0x01	; 1
    2b56:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    2b5a:	b8 cd       	rjmp	.-1168   	; 0x26cc <main+0x248>
			} else {
				GPIO_SetPinValue(PORT_D, PIN1, PIN_LOW);
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 06 09 	call	0x120c	; 0x120c <GPIO_SetPinValue>
    2b66:	b2 cd       	rjmp	.-1180   	; 0x26cc <main+0x248>
			}
		}
	} else {
		LCD_DisplayString("Good Bye :(");
    2b68:	8f ec       	ldi	r24, 0xCF	; 207
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_DisplayString>
		BUZZER_ON();
    2b70:	0e 94 2a 12 	call	0x2454	; 0x2454 <BUZZER_ON>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a8 e4       	ldi	r26, 0x48	; 72
    2b7a:	b2 e4       	ldi	r27, 0x42	; 66
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	55 e4       	ldi	r21, 0x45	; 69
    2b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <main+0x742>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <main+0x7c0>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <main+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <main+0x7a2>
    2c08:	80 e9       	ldi	r24, 0x90	; 144
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <main+0x790>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <main+0x784>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <main+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <main+0x7cc>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		BUZZER_OFF();
    2c58:	0e 94 36 12 	call	0x246c	; 0x246c <BUZZER_OFF>
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    2c60:	c5 5b       	subi	r28, 0xB5	; 181
    2c62:	df 4f       	sbci	r29, 0xFF	; 255
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <__udivmodhi4>:
    2c74:	aa 1b       	sub	r26, r26
    2c76:	bb 1b       	sub	r27, r27
    2c78:	51 e1       	ldi	r21, 0x11	; 17
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <__udivmodhi4_ep>

00002c7c <__udivmodhi4_loop>:
    2c7c:	aa 1f       	adc	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	a6 17       	cp	r26, r22
    2c82:	b7 07       	cpc	r27, r23
    2c84:	10 f0       	brcs	.+4      	; 0x2c8a <__udivmodhi4_ep>
    2c86:	a6 1b       	sub	r26, r22
    2c88:	b7 0b       	sbc	r27, r23

00002c8a <__udivmodhi4_ep>:
    2c8a:	88 1f       	adc	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	5a 95       	dec	r21
    2c90:	a9 f7       	brne	.-22     	; 0x2c7c <__udivmodhi4_loop>
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	08 95       	ret

00002c9c <__divmodsi4>:
    2c9c:	97 fb       	bst	r25, 7
    2c9e:	09 2e       	mov	r0, r25
    2ca0:	05 26       	eor	r0, r21
    2ca2:	0e d0       	rcall	.+28     	; 0x2cc0 <__divmodsi4_neg1>
    2ca4:	57 fd       	sbrc	r21, 7
    2ca6:	04 d0       	rcall	.+8      	; 0x2cb0 <__divmodsi4_neg2>
    2ca8:	14 d0       	rcall	.+40     	; 0x2cd2 <__udivmodsi4>
    2caa:	0a d0       	rcall	.+20     	; 0x2cc0 <__divmodsi4_neg1>
    2cac:	00 1c       	adc	r0, r0
    2cae:	38 f4       	brcc	.+14     	; 0x2cbe <__divmodsi4_exit>

00002cb0 <__divmodsi4_neg2>:
    2cb0:	50 95       	com	r21
    2cb2:	40 95       	com	r20
    2cb4:	30 95       	com	r19
    2cb6:	21 95       	neg	r18
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	4f 4f       	sbci	r20, 0xFF	; 255
    2cbc:	5f 4f       	sbci	r21, 0xFF	; 255

00002cbe <__divmodsi4_exit>:
    2cbe:	08 95       	ret

00002cc0 <__divmodsi4_neg1>:
    2cc0:	f6 f7       	brtc	.-4      	; 0x2cbe <__divmodsi4_exit>
    2cc2:	90 95       	com	r25
    2cc4:	80 95       	com	r24
    2cc6:	70 95       	com	r23
    2cc8:	61 95       	neg	r22
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	08 95       	ret

00002cd2 <__udivmodsi4>:
    2cd2:	a1 e2       	ldi	r26, 0x21	; 33
    2cd4:	1a 2e       	mov	r1, r26
    2cd6:	aa 1b       	sub	r26, r26
    2cd8:	bb 1b       	sub	r27, r27
    2cda:	fd 01       	movw	r30, r26
    2cdc:	0d c0       	rjmp	.+26     	; 0x2cf8 <__udivmodsi4_ep>

00002cde <__udivmodsi4_loop>:
    2cde:	aa 1f       	adc	r26, r26
    2ce0:	bb 1f       	adc	r27, r27
    2ce2:	ee 1f       	adc	r30, r30
    2ce4:	ff 1f       	adc	r31, r31
    2ce6:	a2 17       	cp	r26, r18
    2ce8:	b3 07       	cpc	r27, r19
    2cea:	e4 07       	cpc	r30, r20
    2cec:	f5 07       	cpc	r31, r21
    2cee:	20 f0       	brcs	.+8      	; 0x2cf8 <__udivmodsi4_ep>
    2cf0:	a2 1b       	sub	r26, r18
    2cf2:	b3 0b       	sbc	r27, r19
    2cf4:	e4 0b       	sbc	r30, r20
    2cf6:	f5 0b       	sbc	r31, r21

00002cf8 <__udivmodsi4_ep>:
    2cf8:	66 1f       	adc	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	88 1f       	adc	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	1a 94       	dec	r1
    2d02:	69 f7       	brne	.-38     	; 0x2cde <__udivmodsi4_loop>
    2d04:	60 95       	com	r22
    2d06:	70 95       	com	r23
    2d08:	80 95       	com	r24
    2d0a:	90 95       	com	r25
    2d0c:	9b 01       	movw	r18, r22
    2d0e:	ac 01       	movw	r20, r24
    2d10:	bd 01       	movw	r22, r26
    2d12:	cf 01       	movw	r24, r30
    2d14:	08 95       	ret

00002d16 <__prologue_saves__>:
    2d16:	2f 92       	push	r2
    2d18:	3f 92       	push	r3
    2d1a:	4f 92       	push	r4
    2d1c:	5f 92       	push	r5
    2d1e:	6f 92       	push	r6
    2d20:	7f 92       	push	r7
    2d22:	8f 92       	push	r8
    2d24:	9f 92       	push	r9
    2d26:	af 92       	push	r10
    2d28:	bf 92       	push	r11
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    2d3e:	ca 1b       	sub	r28, r26
    2d40:	db 0b       	sbc	r29, r27
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	de bf       	out	0x3e, r29	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	cd bf       	out	0x3d, r28	; 61
    2d4c:	09 94       	ijmp

00002d4e <__epilogue_restores__>:
    2d4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2d50:	39 88       	ldd	r3, Y+17	; 0x11
    2d52:	48 88       	ldd	r4, Y+16	; 0x10
    2d54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d60:	b9 84       	ldd	r11, Y+9	; 0x09
    2d62:	c8 84       	ldd	r12, Y+8	; 0x08
    2d64:	df 80       	ldd	r13, Y+7	; 0x07
    2d66:	ee 80       	ldd	r14, Y+6	; 0x06
    2d68:	fd 80       	ldd	r15, Y+5	; 0x05
    2d6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2d6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2d6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2d70:	b9 81       	ldd	r27, Y+1	; 0x01
    2d72:	ce 0f       	add	r28, r30
    2d74:	d1 1d       	adc	r29, r1
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	ed 01       	movw	r28, r26
    2d82:	08 95       	ret

00002d84 <_exit>:
    2d84:	f8 94       	cli

00002d86 <__stop_program>:
    2d86:	ff cf       	rjmp	.-2      	; 0x2d86 <__stop_program>
